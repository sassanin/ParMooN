#!/bin/csh
#
# ACML version 4.2 Copyright AMD,NAG 2008
#
# This script reads data files generated by performance-timing 
# programs, then uses the gnuplot package to plot graphs of the timing data 
# for the routine whose name is supplied as an argument to this script.
#

set search = `which gnuplot |& sed 's/.*no gnuplot in.*/X/' |& sed 's/.*not found.*/X/'`

if ("${search}" != "X") then
  set gnuplotcmd = gnuplot
else
  # Under windows, gnuplot is often named wgnuplot
  set search = `which wgnuplot |& sed 's/.*no wgnuplot in.*/X/' |& sed 's/.*not found.*/X/'`
  if ("${search}" != "X") then
    set gnuplotcmd = wgnuplot
  else
    echo "${0}: cannot find gnuplot in your path. Please install gnuplot"
    echo "if you wish to view graphs of the timing results."
    echo "Version 4.0 or later is required."
    exit 0
  endif
endif

set script = $0
set script = $script:t

onintr cleanup

set postscript = 0
if ("$1" == "-ps") then
  set postscript = 1
  set arg = $2
else
  set arg = $1
endif

if ("$arg" == "") then
  echo "Usage: ${script} [-ps] <name>"
  echo "  where <name> is the name of the routine whose timing data is to be plotted." 
  echo "  E.g., ${script} dgemm" 
  echo ""
  echo "  The data file time_<name>.res containing timing data generated by the "
  echo "  performance example program time_<name>.f must exist."
  echo "  Optional switch -ps means send output to a PostScript file."
  exit 0
endif

set rname = `echo ${arg} | sed 's/.*time_//' | sed 's/\..*//'`

set plot1_d = "time_${rname}.res"
set temp_file = "plot_one_tmp$$.delete_me"
set psfile = "time_${rname}.ps"

touch csplit-0 0-thread
rm -f csplit-* *-thread
csplit -k -s -f csplit- ${plot1_d} /threads/ '{20}' >& /dev/null
rm -f csplit-00
foreach file (`ls csplit-*`)
  mv ${file} `head -1 $file | sed -e 's/.* \([0-9]*\) threads/\1-thread/'`
end

set quote = \"

if ("$postscript" == "1") then
  echo "set terminal postscript color solid" >> ${temp_file}
  echo "set output ${quote}${psfile}${quote}" >> ${temp_file}
endif
echo "set title ${quote}Performance profile for ${rname}" >> ${temp_file}
if ("${rname}" == "zfft1d" || "${rname}" == "drandbeta" || "${rname}" == "dranduniform") then
  echo "set logscale x" >> ${temp_file}
  echo "set xlabel ${quote}Problem size (log scale)${quote}" >> ${temp_file}
else
  echo "set xlabel ${quote}Problem size${quote}" >> ${temp_file}
endif
if ("${rname}" == "drandbeta" || "${rname}" == "dranduniform") then
  echo "set ylabel ${quote}Values per millisecond${quote}" >> ${temp_file}
else
  echo "set ylabel ${quote}Mflops${quote}" >> ${temp_file}
endif
echo "set key on box" >> ${temp_file}
set plotline = "plot"
foreach file (`ls *-thread`)
  set qp1 = \'${file}\'
  if ("${plotline}" != "plot") then
    set plotline = "${plotline},"
  endif
  set plotline = "${plotline} ${qp1}, ${qp1} with lines"
end
echo "${plotline}" >> ${temp_file}
if ("$postscript" == "0") then
  echo "pause -1 'Hit return to exit: '" >> ${temp_file}
endif

echo ${gnuplotcmd} ${temp_file}
${gnuplotcmd} ${temp_file}

if ("$postscript" == "1") then
  if (-e "$psfile") then
    echo Created ${psfile}
  else
    echo Failed to create ${psfile}
  endif
endif

cleanup:
rm -f ${temp_file} *-thread
