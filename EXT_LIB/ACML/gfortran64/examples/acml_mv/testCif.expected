ACML vector math library example C program
------------------------------------------

Testing double precision scalar functions
   fastexp(    3.000) =    20.086
   fastlog(   10.000) =     2.303
 fastlog10(   10.000) =     1.000
  fastlog2(   10.000) =     3.322
   fastpow(    3.000,    2.500) =    15.588
   fastsin(    3.142) =     0.000
   fastcos(    3.142) =    -1.000
fastsincos(3.14159,*s,*c) =     0.000,   -1.000
   fastsin(1000000.0) =    -0.350

Testing double precision array functions
   vrda_exp(    2.000,    6.000,    8.000,    9.000) = 
                7.389,  403.429, 2980.958, 8103.084
   vrda_exp(    2.000,    6.000,    8.000,    9.000,    9.500) = 
                7.389,  403.429, 2980.958, 8103.084, 13359.727
   vrda_log(    2.000,    6.000,    8.000,    9.000) = 
                0.693,    1.792,    2.079,    2.197
 vrda_log10(    2.000,    6.000,    8.000,    9.000) = 
                0.301,    0.778,    0.903,    0.954
  vrda_log2(    2.000,    6.000,    8.000,    9.000) = 
                1.000,    2.585,    3.000,    3.170
   vrda_sin(    2.000,    6.000,    8.000,    9.000) = 
                0.909,   -0.279,    0.989,    0.412
   vrda_cos(    2.000,    6.000,    8.000,    9.000) = 
               -0.416,    0.960,   -0.146,   -0.911
vrda_sincos(    2.000,    6.000,    8.000,    9.000) = 
                0.909,   -0.279,    0.989,    0.412
               -0.416,    0.960,   -0.146,   -0.911

Testing single precision scalar functions
   fastexpf(    3.000) =    20.086
   fastlogf(   10.000) =     2.303
 fastlog10f(   10.000) =     1.000
  fastlog2f(   10.000) =     3.322
   fastpowf(    3.000,    2.500) =    15.588
   fastsinf(    3.000) =     0.141
   fastcosf(    3.000) =    -0.990
fastsincosf(    3.000) =     0.141,   -0.990

Testing single precision array functions
   vrsa_expf(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) =
                       2.718,          7.389,         20.086,         54.598,
                     403.429,       1096.633,       2980.958,       8103.084

   vrsa_logf(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) =
               0.000,  0.693,  1.099,  1.386,  1.792,  1.946,  2.079,  2.197

 vrsa_log10f(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) =
               0.000,  0.301,  0.477,  0.602,  0.778,  0.845,  0.903,  0.954

  vrsa_log2f(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) =
               0.000,  1.000,  1.585,  2.000,  2.585,  2.807,  3.000,  3.170

   vrsa_sinf(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) =
                    0.841,          0.909,          0.141,         -0.757,
                   -0.279,          0.657,          0.989,          0.412

   vrsa_cosf(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) =
                    0.540,         -0.416,         -0.990,         -0.654,
                    0.960,          0.754,         -0.146,         -0.911

vrsa_sincosf(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) =
                    0.841,          0.909,          0.141,         -0.757,
                   -0.279,          0.657,          0.989,          0.412
                    0.540,         -0.416,         -0.990,         -0.654,
                    0.960,          0.754,         -0.146,         -0.911

   vrsa_powf(  1.000^  0.841,  2.000^  0.909,  3.000^  0.141,  4.000^ -0.757,
               6.000^ -0.279,  7.000^  0.657,  8.000^  0.989,  9.000^  0.412) =
                    1.000,          1.878,          1.168,          0.350,
                    0.606,          3.591,          7.825,          2.473

  vrsa_powxf(  1.000^  0.841,  2.000^  0.841,  3.000^  0.841,  4.000^  0.841,
               6.000^  0.841,  7.000^  0.841,  8.000^  0.841,  9.000^  0.841) =
                    1.000,          1.792,          2.520,          3.211,
                    4.516,          5.142,          5.753,          6.353

