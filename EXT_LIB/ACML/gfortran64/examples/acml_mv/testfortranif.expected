 ACML vector math library example Fortran program
 ------------------------------------------------

 Testing double precision scalar routines
      FASTEXP(    3.000) =    20.086
      FASTLOG(   10.000) =     2.303
    FASTLOG10(   10.000) =     1.000
     FASTLOG2(   10.000) =     3.322
      FASTPOW(    3.000,    2.500) =    15.588
      FASTSIN(    3.142) =     0.000
      FASTCOS(    3.142) =    -1.000
   FASTSINCOS(    3.142, S, C) =     0.000,   -1.000
      FASTSIN( 1000000.0000) =    -0.350

 Testing double precision array routines
     VRDA_EXP(    2.000,    6.000,    8.000,    9.000) = 
                  7.389,  403.429, 2980.958, 8103.084
     VRDA_LOG(    2.000,    6.000,    8.000,    9.000) = 
                  0.693,    1.792,    2.079,    2.197
   VRDA_LOG10(    2.000,    6.000,    8.000,    9.000) = 
                  0.301,    0.778,    0.903,    0.954
    VRDA_LOG2(    2.000,    6.000,    8.000,    9.000) = 
                  1.000,    2.585,    3.000,    3.170
     VRDA_SIN(    2.000,    6.000,    8.000,    9.000) = 
                  0.909,   -0.279,    0.989,    0.412
     VRDA_COS(    2.000,    6.000,    8.000,    9.000) = 
                 -0.416,    0.960,   -0.146,   -0.911
  VRDA_SINCOS(    2.000,    6.000,    8.000,    9.000, S, C) = 
                  0.909,   -0.279,    0.989,    0.412
                 -0.416,    0.960,   -0.146,   -0.911

 Testing single precision scalar routines
     FASTEXPF(    3.000) =    20.086
     FASTLOGF(   10.000) =     2.303
   FASTLOG10F(   10.000) =     1.000
    FASTLOG2F(   10.000) =     3.322
     FASTPOWF(    3.000,    2.500) =    15.588
     FASTSINF(    3.000) =     0.141
     FASTCOSF(    3.000) =    -0.990
  FASTSINCOSF(    3.000, S, C) =     0.141,   -0.990

 Testing Single precision array routines
    VRSA_EXPF(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) = 
                     2.718,          7.389,         20.086,         54.598,
                   403.429,       1096.633,       2980.958,       8103.084
    VRSA_LOGF(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) = 
                0.000,  0.693,  1.099,  1.386,  1.792,  1.946,  2.079,  2.197
  VRSA_LOG10F(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) = 
                0.000,  0.301,  0.477,  0.602,  0.778,  0.845,  0.903,  0.954
   VRSA_LOG2F(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) = 
                0.000,  1.000,  1.585,  2.000,  2.585,  2.807,  3.000,  3.170
    VRSA_SINF(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) = 
                     0.841,          0.909,          0.141,         -0.757,
                    -0.279,          0.657,          0.989,          0.412
    VRSA_COSF(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) = 
                0.540, -0.416, -0.990, -0.654,  0.960,  0.754, -0.146, -0.911
 VRSA_SINCOSF(  1.000,  2.000,  3.000,  4.000,  6.000,  7.000,  8.000,  9.000) = 
                     0.841,          0.909,          0.141,         -0.757,
                    -0.279,          0.657,          0.989,          0.412
                     0.540,         -0.416,         -0.990,         -0.654,
                     0.960,          0.754,         -0.146,         -0.911
    VRSA_POWF(  1.000** 0.841,  2.000** 0.909,  3.000** 0.141,  4.000**-0.757,
                6.000**-0.279,  7.000** 0.657,  8.000** 0.989,  9.000** 0.412) = 
                     1.000,          1.878,          1.168,          0.350,
                     0.606,          3.591,          7.825,          2.473
   VRSA_POWXF(  1.000** 0.841,  2.000** 0.841,  3.000** 0.841,  4.000** 0.841,
                6.000** 0.841,  7.000** 0.841,  8.000** 0.841,  9.000** 0.841) = 
                     1.000,          1.792,          2.520,          3.211,
                     4.516,          5.142,          5.753,          6.353
