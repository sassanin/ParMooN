/** ==========================================================================
#    This file is part of the finite element software ParMooN.
# 
#    ParMooN (cmg.cds.iisc.ac.in/parmoon) is a free finite element software  
#    developed by the research groups of Prof. Sashikumaar Ganesan (IISc, Bangalore),
#    Prof. Volker John (WIAS Berlin) and Prof. Gunar Matthies (TU-Dresden):
#
#    ParMooN is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    ParMooN is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with ParMooN.  If not, see <http://www.gnu.org/licenses/>.
#
#    If your company is selling a software using ParMooN, please consider 
#    the option to obtain a commercial license for a fee. Please send 
#    corresponding requests to sashi@iisc.ac.in

# =========================================================================*/ 
   
// ***********************************************************************
// Q2 Raviart-Thomas vector element, nonconforming , 2D
// History:  05.12.2011 implementation (Ulrich)
// ***********************************************************************

// base function values
// vector function, orthonormal to edges, 
// functions 1,2, and 3 are orthogonal to edge 1
// functions 4,5, and 6 are orthogonal to edge 2
// functions 7,8, and 9 are orthogonal to edge 3
// functions 10,11, and 12 are orthogonal to edge 4
// functions 13-24 correspond to inner degrees of freedom


// coefficient matrix for different choices of the degrees of freedom
// There seems to be no difference in using integral or point evaluation for 
// inner dofs. 
// The dofs on the edges determine the boundary conditions as well. Using 
// Tschebyscheff-points might improve the boundary approximation.

// using equidistant points on edges and integral evaluation for inner dofs
/*static double N_Q_RT2_2D_CM[576] = { 
0,0,0,0,-0.125,0,0,0,0,0,0.125,0,0.84375,0,0,0,0,0,0,-1.40625,0,0,0,0,
0,0.125,0,0,0,0,0,-0.125,0,0,0,0,0,0.84375,0,0,0,0,-1.40625,0,0,0,0,0,
0,0,0,0,-0.375,0,0,0,0,0,-0.375,0,0,0,4.21875,0,0,0,0,0,0,0,0,-7.03125,
-0.125,0,0.125,0,0,0,-0.125,-0,0.125,0,0,0,0,0,0,1.125,0,-0,-0,0,0,0,0,0,
0,0,0,0.125,-0,-0.125,0,0,0,0.125,-0,-0.125,-0,0,0,0,1.125,0,0,0,0,0,0,-0,
-0,-0.375,-0,0,0,0,-0,-0.375,-0,0,0,0,0,-0,0,-0,0,4.21875,0,0,0,0,-7.03125,0,
0,0,0,0,0.375,-0,0,0,0,0,-0.375,0,-0.84375,0,-0,0,0,0,0,1.40625,0,0,0,0,
0.25,-0.5,0.25,0,0,0,-0.25,0.5,-0.25,0,0,0,0,-1.40625,0,0,0,0,4.21875,0,0,0,0,0,
0,0,0,-0.25,0.5,-0.25,0,0,0,0.25,-0.5,0.25,-1.40625,0,0,0,0,0,0,4.21875,0,0,0,0,
-0,-0.375,0,0,0,0,0,0.375,0,0,0,0,0,-0.84375,0,0,0,0,1.40625,0,0,0,0,0,
0,0,0,0.375,0,-0.375,0,0,0,-0.375,-0,0.375,-0,0,-0,0,0,0,0,0,5.625,0,0,-0,
0.375,0,-0.375,0,0,0,-0.375,0,0.375,0,0,0,0,-0,0,0,0,0,0,0,0,5.625,0,0,
0,0,0,-0,0.625,-0,0,0,0,-0,0.625,-0,0,0,-4.21875,0,-0,0,0,-0,-0,0,0,7.03125,
0,0.625,0,0,0,0,0,0.625,0,0,0,0,0,0,0,0,0,-4.21875,-0,0,0,0,7.03125,0,
0,0,0,-0.375,0,0.375,0,0,0,-0.375,0,0.375,0,0,-0,0,-1.125,0,0,-0,-0,0,0,0,
-0.75,1.5,-0.75,0,0,0,-0.75,1.5,-0.75,0,0,0,0,0,0,0,0,-7.03125,0,0,0,0,21.09375,0,
0,0,0,-0.75,1.5,-0.75,0,0,0,-0.75,1.5,-0.75,0,0,-7.03125,0,0,0,0,0,0,0,0,21.09375,
0.375,0,-0.375,0,0,0,0.375,0,-0.375,0,0,0,0,0,0,-1.125,0,0,0,0,0,0,0,0,
0,0,0,-0.625,-0,0.625,0,0,0,0.625,0,-0.625,0,0,0,0,-0,0,0,-0,-5.625,0,0,0,
-0.625,-0,0.625,0,0,0,0.625,-0,-0.625,0,0,0,0,-0,0,-0,0,-0,0,0,0,-5.625,-0,0,
0,0,0,0.75,-1.5,0.75,0,0,0,-0.75,1.5,-0.75,1.40625,0,0,0,0,0,0,-4.21875,0,0,0,0,
-0.75,1.5,-0.75,0,0,0,0.75,-1.5,0.75,0,0,0,0,1.40625,0,0,0,0,-4.21875,0,0,0,0,0,
0,0,0,1.25,-2.5,1.25,0,0,0,1.25,-2.5,1.25,0,0,7.03125,0,0,0,0,0,0,0,0,-21.09375,
1.25,-2.5,1.25,0,0,0,1.25,-2.5,1.25,0,0,0,0,0,0,0,0,7.03125,0,0,0,0,-21.09375,0
};*/

// using Gauss-Points on edges and integral evaluation for inner dofs
/*static double N_Q_RT2_2D_CM[576] = {
0,0,0,0,-0.125,0,0,0,0,0,0.125,-0,0.84375,0,0,0,0,0,0,-1.40625,-0,0,0,0,
0,0.125,0,0,0,0,0,-0.125,0,0,0,0,0,0.84375,0,0,0,0,-1.40625,0,0,0,0,0,
0,0,0,0,-0.375,0,0,0,0,0,-0.375,0,-0,0,4.21875,0,0,0,0,0,0,0,0,-7.03125,
-0.08068715,0,0.08068715,0,0,0,-0.08068715,0,0.08068715,0,0,0,0,0,0,1.125,0,0,0,0,0,0,0,0,
0,0,0,0.08068715,0,-0.08068715,0,0,0,0.08068715,0,-0.08068715,0,0,0,0,1.125,0,0,0,0,0,0,0,
0,-0.375,0,0,0,0,0,-0.375,0,0,0,0,0,0,0,0,0,4.21875,0,0,0,0,-7.03125,0,
0,0,0,0,0.375,0,0,0,0,0,-0.375,0,-0.84375,0,0,0,0,0,0,1.40625,0,0,0,0,
0.10416667,-0.20833333,0.10416667,0,0,0,-0.10416667,0.20833333,-0.10416667,0,0,0,0,-1.40625,0,0,0,-0,4.21875,0,0,0,0,0,
0,0,0,-0.10416667,0.20833333,-0.10416667,0,0,0,0.10416667,-0.20833333,0.10416667,-1.40625,0,0,0,0,0,0,4.21875,0,0,0,0,
0,-0.375,0,0,0,0,0,0.375,0,0,0,0,0,-0.84375,0,0,0,0,1.40625,0,0,0,0,0,
0,0,0,0.24206146,0,-0.24206146,0,0,0,-0.24206146,0,0.24206146,0,0,0,0,0,0,0,0,5.625,0,0,0,
0.24206146,0,-0.24206146,0,0,0,-0.24206146,0,0.24206146,0,0,0,0,0,0,0,0,0,0,0,0,5.625,0,0,
0,0,0,-0,0.625,0,0,0,0,0,0.625,0,0,0,-4.21875,0,0,0,0,0,0,0,0,7.03125,
0,0.625,0,0,0,0,0,0.625,0,0,0,0,0,0,0,0,0,-4.21875,0,0,0,0,7.03125,0,
0,0,0,-0.24206146,0,0.24206146,0,0,0,-0.24206146,0,0.24206146,0,0,0,0,-1.125,0,0,0,0,0,0,0,
-0.3125,0.625,-0.3125,0,0,0,-0.3125,0.625,-0.3125,0,0,0,0,0,0,0,0,-7.03125,0,0,0,0,21.09375,0,
0,0,0,-0.3125,0.625,-0.3125,0,0,0,-0.3125,0.625,-0.3125,0,0,-7.03125,0,0,0,0,0,0,0,0,21.09375,
0.24206146,0,-0.24206146,0,0,0,0.24206146,0,-0.24206146,0,0,0,0,0,0,-1.125,0,0,0,0,0,0,0,0,
0,0,0,-0.40343577,-0,0.40343577,0,0,0,0.40343577,0,-0.40343577,0,0,0,0,0,0,0,0,-5.625,0,0,0,
-0.40343577,0,0.40343577,0,0,0,0.40343577,0,-0.40343577,0,0,0,0,0,0,0,0,0,0,0,0,-5.625,0,0,
0,0,0,0.3125,-0.625,0.3125,0,0,0,-0.3125,0.625,-0.3125,1.40625,0,0,0,0,0,0,-4.21875,0,0,0,0,
-0.3125,0.625,-0.3125,0,0,0,0.3125,-0.625,0.3125,0,0,0,0,1.40625,0,0,0,0,-4.21875,0,0,0,0,0,
0,0,0,0.52083333,-1.04166667,0.52083333,0,0,0,0.52083333,-1.04166667,0.52083333,0,0,7.03125,0,0,0,0,0,0,0,0,-21.09375,
0.52083333,-1.04166667,0.52083333,0,0,0,0.52083333,-1.04166667,0.52083333,0,0,0,0,0,0,0,0,7.03125,0,0,0,0,-21.09375,0
};*/
/*
// using Tschebyscheff-points on edges and integral evaluations for inner dofs
static double N_Q_RT2_2D_CM[576] = {
0,0,0,0,-0.125,0,0,0,0,-0,0.125,-0,0.84375,0,0,0,-0,0,0,-1.40625,-0,0,0,0,
-0,0.125,-0,0,0,0,0,-0.125,0,0,0,0,0,0.84375,0,-0,0,-0,-1.40625,0,0,-0,0,0,
0,0,0,0,-0.375,0,0,0,0,0,-0.375,0,-0,0,4.21875,0,0,0,0,0,0,0,0,-7.03125,
-0.07216878,0,0.07216878,0,0,0,-0.07216878,0,0.07216878,0,0,0,0,0,0,1.125,0,-0,-0,0,0,0,0,0,
0,0,0,0.07216878,-0,-0.07216878,0,0,0,0.07216878,-0,-0.07216878,-0,0,0,0,1.125,0,0,0,0,0,0,-0,
-0,-0.375,-0,0,0,0,-0,-0.375,-0,0,0,0,0,-0,0,0,0,4.21875,0,0,0,-0,-7.03125,0,
0,0,0,-0,0.375,-0,0,0,0,0,-0.375,0,-0.84375,0,-0,0,0,0,0,1.40625,0,0,0,0,
0.08333333,-0.16666667,0.08333333,0,0,0,-0.08333333,0.16666667,-0.08333333,0,0,0,0,-1.40625,0,-0,0,0,4.21875,0,0,0,-0,0,
0,0,0,-0.08333333,0.16666667,-0.08333333,0,0,0,0.08333333,-0.16666667,0.08333333,-1.40625,0,-0,0,0,0,0,4.21875,0,0,0,0,
-0,-0.375,-0,0,0,0,-0,0.375,0,0,0,0,0,-0.84375,0,0,0,0,1.40625,0,0,-0,-0,0,
0,0,0,0.21650635,0,-0.21650635,0,0,0,-0.21650635,-0,0.21650635,-0,0,-0,0,0,0,0,0,5.625,0,0,-0,
0.21650635,-0,-0.21650635,0,0,0,-0.21650635,0,0.21650635,0,0,0,0,-0,0,-0,0,0,0,0,0,5.625,0,0,
0,0,0,-0,0.625,0,0,0,0,-0,0.625,-0,0,0,-4.21875,0,-0,0,0,-0,-0,0,0,7.03125,
0,0.625,-0,0,0,0,0,0.625,0,0,0,0,0,0,0,-0,0,-4.21875,-0,0,0,0,7.03125,0,
0,0,0,-0.21650635,0,0.21650635,0,0,0,-0.21650635,0,0.21650635,0,0,-0,0,-1.125,0,0,-0,-0,0,0,0,
-0.25,0.5,-0.25,0,0,0,-0.25,0.5,-0.25,0,0,0,0,0,0,-0,0,-7.03125,-0,0,0,0,21.09375,0,
0,0,0,-0.25,0.5,-0.25,0,0,0,-0.25,0.5,-0.25,0,0,-7.03125,0,-0,0,0,-0,-0,0,0,21.09375,
0.21650635,-0,-0.21650635,0,0,0,0.21650635,-0,-0.21650635,0,0,0,0,-0,0,-1.125,0,0,0,0,0,-0,-0,0,
0,0,0,-0.36084392,-0,0.36084392,0,0,0,0.36084392,0,-0.36084392,0,0,0,0,-0,0,0,-0,-5.625,0,0,0,
-0.36084392,0,0.36084392,0,0,0,0.36084392,-0,-0.36084392,0,0,0,0,0,0,0,0,-0,-0,0,0,-5.625,-0,-0,
0,0,0,0.25,-0.5,0.25,0,0,0,-0.25,0.5,-0.25,1.40625,0,0,0,-0,0,0,-4.21875,-0,0,0,0,
-0.25,0.5,-0.25,0,0,0,0.25,-0.5,0.25,0,0,0,0,1.40625,0,0,0,-0,-4.21875,0,0,0,0,0,
0,0,0,0.41666667,-0.83333333,0.41666667,0,0,0,0.41666667,-0.83333333,0.41666667,-0,0,7.03125,0,0,0,0,0,0,0,-0,-21.09375,
0.41666667,-0.83333333,0.41666667,0,0,0,0.41666667,-0.83333333,0.41666667,0,0,0,0,-0,0,0,0,7.03125,0,0,0,-0,-21.09375,0
};
*/
// using Tschebyscheff-points on edges and point evaluations for inner dofs
static double N_Q_RT2_2D_CM[576] = {
0,0,0,-0,-0.25,0,0,0,0,0,0.25,-0,0,0,0,0,-0,0,0,1,-0,-0,1,0,
0,0.25,-0,0,0,0,0,-0.25,-0,0,0,0,0,1,-0,0,1,0,0,-0,0,0,0,0,
0,0,0,0,-0.25,0,0,0,0,0,-0.25,0,0,0,0,0,-0,0,0,1.4142135624,-0,0,-1.4142135624,0,
-0.1443375673,0,0.1443375673,0,0,0,-0.1443375673,0,0.1443375673,0,0,0,-0.5773502692,0,0.5773502692,-0.5773502692,-0,0.5773502692,0,0,0,0,0,0,
0,0,0,0.1443375673,0,-0.1443375673,0,0,0,0.1443375673,0,-0.1443375673,0,0,0,0,-0,0,-0.5773502692,0,0.5773502692,-0.5773502692,0,0.5773502692,
0,-0.25,-0,0,0,0,-0,-0.25,-0,0,0,0,-0,-1.4142135624,-0,0,1.4142135624,0,0,0,0,0,0,0,
0,0,0,-0,0.5,0,0,0,0,-0,-0.5,0,0,0,0,0,-0,0,-0,-1,0,0,-1,-0,
0.1666666667,-0.3333333333,0.1666666667,0,0,0,-0.1666666667,0.3333333333,-0.1666666667,0,0,0,0.6666666667,-1.3333333333,0.6666666667,0.6666666667,-1.3333333333,0.6666666667,0,0,0,0,0,0,
0,0,0,-0.1666666667,0.3333333333,-0.1666666667,0,0,0,0.1666666667,-0.3333333333,0.1666666667,0,0,0,0,-0,0,0.6666666667,-1.3333333333,0.6666666667,0.6666666667,-1.3333333333,0.6666666667,
-0,-0.5,0,0,0,0,0,0.5,0,0,0,0,0,-1,0,-0,-1,0,0,0,0,0,0,0,
0,0,0,0.1443375673,0,-0.1443375673,0,0,0,-0.1443375673,0,0.1443375673,0,0,0,0,-0,0,-0.8164965809,0,0.8164965809,0.8164965809,0,-0.8164965809,
0.1443375673,-0,-0.1443375673,0,0,0,-0.1443375673,0,0.1443375673,0,0,0,0.8164965809,-0,-0.8164965809,-0.8164965809,-0,0.8164965809,0,0,0,0,0,0,
0,0,0,0,0.5,-0,0,0,0,-0,0.5,-0,0,0,0,0,-0,0,0,-1.4142135624,0,-0,1.4142135624,-0,
-0,0.5,0,0,0,0,0,0.5,0,0,0,0,0,1.4142135624,0,-0,-1.4142135624,-0,0,0,0,0,0,0,
0,0,0,-0.2886751346,0,0.2886751346,0,0,0,-0.2886751346,0,0.2886751346,0,0,0,0,-0,0,0.5773502692,0,-0.5773502692,0.5773502692,0,-0.5773502692,
-0.1666666667,0.3333333333,-0.1666666667,0,0,0,-0.1666666667,0.3333333333,-0.1666666667,0,0,0,-0.9428090416,1.8856180832,-0.9428090416,0.9428090416,-1.8856180832,0.9428090416,0,0,0,0,0,0,
0,0,0,-0.1666666667,0.3333333333,-0.1666666667,0,0,0,-0.1666666667,0.3333333333,-0.1666666667,0,0,0,0,-0,0,0.9428090416,-1.8856180832,0.9428090416,-0.9428090416,1.8856180832,-0.9428090416,
0.2886751346,-0,-0.2886751346,0,0,0,0.2886751346,-0,-0.2886751346,0,0,0,0.5773502692,-0,-0.5773502692,0.5773502692,0,-0.5773502692,0,0,0,0,0,0,
0,0,0,-0.2886751346,0,0.2886751346,0,0,0,0.2886751346,0,-0.2886751346,0,0,0,0,-0,0,0.8164965809,0,-0.8164965809,-0.8164965809,0,0.8164965809,
-0.2886751346,-0,0.2886751346,0,0,0,0.2886751346,-0,-0.2886751346,0,0,0,-0.8164965809,0,0.8164965809,0.8164965809,0,-0.8164965809,0,-0,0,0,0,0,
0,0,0,0.3333333333,-0.6666666667,0.3333333333,0,0,0,-0.3333333333,0.6666666667,-0.3333333333,0,0,0,0,-0,0,-0.6666666667,1.3333333333,-0.6666666667,-0.6666666667,1.3333333333,-0.6666666667,
-0.3333333333,0.6666666667,-0.3333333333,0,0,0,0.3333333333,-0.6666666667,0.3333333333,0,0,0,-0.6666666667,1.3333333333,-0.6666666667,-0.6666666667,1.3333333333,-0.6666666667,0,0,0,0,0,0,
0,0,0,0.3333333333,-0.6666666667,0.3333333333,0,0,0,0.3333333333,-0.6666666667,0.3333333333,0,0,0,0,0,0,-0.9428090416,1.8856180832,-0.9428090416,0.9428090416,-1.8856180832,0.9428090416,
0.3333333333,-0.6666666667,0.3333333333,0,0,0,0.3333333333,-0.6666666667,0.3333333333,0,0,0,0.9428090416,-1.8856180832,0.9428090416,-0.9428090416,1.8856180832,-0.9428090416,0,0,0,0,0,0
};


static void N_Q_RT2_2D_Funct(double xi, double eta, double *values)
{
  int nBF = 24; // number of basis functions
  // monomials x-component and y-component
  double mon_x[24]={1,0,xi,0 ,eta,0  ,xi*xi,0, eta*eta, 0, xi*eta, 0, xi*xi*xi, 0,  xi*xi*eta, 0, xi*eta*eta, 0, xi*xi*xi*eta, 0, xi*xi*eta*eta, 0, xi*xi*xi*eta*eta, 0};
  double mon_y[24]={0, 1, 0, xi, 0, eta, 0, xi*xi, 0, eta*eta, 0, xi*eta, 0, eta*eta*eta, 0, xi*xi*eta, 0, xi*eta*eta, 0, xi*eta*eta*eta, 0, xi*xi*eta*eta, 0, xi*xi*eta*eta*eta};
  
  memset(values, 0.0, 2*nBF*SizeOfDouble); // 2 is the space dimension
  for(int i=0; i<nBF; i++)
  {
    for(int j=0; j<nBF; j++)
    {
      values[i    ] += N_Q_RT2_2D_CM[i+j*nBF]*mon_x[j];
      values[i+nBF] += N_Q_RT2_2D_CM[i+j*nBF]*mon_y[j];
    }
  }
}

// values of the derivatives in xi direction
static void N_Q_RT2_2D_DeriveXi(double xi, double eta, double *values)
{
  int nBF = 24; // number of basis functions
  // monomials x-component and y-component
  double mon_x[24]={0,0,1,0,0,0,2*xi,0,0,0,eta,0,3*xi*xi,0,2*xi*eta,0,eta*eta, 0,3*xi*xi*eta,0,2*xi*eta*eta,0,3*xi*xi*eta*eta,0};
  double mon_y[24]={0,0,0,1,0,0,0,2*xi,0,0,0,eta,0,0,0,2*xi*eta,0,eta*eta,0, eta*eta*eta,0,2*xi*eta*eta,0,2*xi*eta*eta*eta};
  
  memset(values, 0.0, 2*nBF*SizeOfDouble); // 2 is the space dimension
  for(int i=0; i<nBF; i++)
  {
    for(int j=0; j<nBF; j++)
    {
      values[i    ] += N_Q_RT2_2D_CM[i+j*nBF]*mon_x[j];
      values[i+nBF] += N_Q_RT2_2D_CM[i+j*nBF]*mon_y[j];
    }
  }
}

// values of the derivatives in eta direction
static void N_Q_RT2_2D_DeriveEta(double xi, double eta, double *values)
{
  int nBF = 24; // number of basis functions
  // monomials x-component and y-component
  double mon_x[24]={0,0,0,0,1,0,0,0,2*eta,0,xi,0,0,0,xi*xi,0,2*xi*eta,0, xi*xi*xi,0,2*xi*xi*eta,0,2*xi*xi*xi*eta, 0};
  double mon_y[24]={0,0,0,0,0,1,0,0,0,2*eta,0,xi,0,3*eta*eta,0,xi*xi,0, 2*xi*eta,0,3*xi*eta*eta,0,2*xi*xi*eta,0,3*xi*xi*eta*eta};
  
  memset(values, 0.0, 2*nBF*SizeOfDouble); // 2 is the space dimension
  for(int i=0; i<nBF; i++)
  {
    for(int j=0; j<nBF; j++)
    {
      values[i    ] += N_Q_RT2_2D_CM[i+j*nBF]*mon_x[j];
      values[i+nBF] += N_Q_RT2_2D_CM[i+j*nBF]*mon_y[j];
    }
  }
}

// values of derivatives in xi-xi direction
static void N_Q_RT2_2D_DeriveXiXi(double xi, double eta, double *values)
{
  int nBF = 24; // number of basis functions
  // monomials x-component and y-component
  double mon_x[24]={0,0,0,0,0,0,2,0,0,0,0,0,6*xi,0,2*eta,0,0,0,6*xi*eta,0,2*eta*eta, 0,6*xi*eta*eta,0};
  double mon_y[24]={0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2*eta,0,0,0,0,0,2*eta*eta,0, 2*eta*eta*eta};
  
  memset(values, 0.0, 2*nBF*SizeOfDouble); // 2 is the space dimension
  for(int i=0; i<nBF; i++)
  {
    for(int j=0; j<nBF; j++)
    {
      values[i    ] += N_Q_RT2_2D_CM[i+j*nBF]*mon_x[j];
      values[i+nBF] += N_Q_RT2_2D_CM[i+j*nBF]*mon_y[j];
    }
  }
}

// values of derivatives in eta-eta direction
static void N_Q_RT2_2D_DeriveEtaEta(double xi, double eta, double *values)
{
  int nBF = 24; // number of basis functions
  // monomials x-component and y-component
  double mon_x[24]={0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2*xi,0,0,0,2*xi*xi,0, 2*xi*xi*xi, 0};
  double mon_y[24]={0,0,0,0,0,0,0,0,0,2,0,0,0,6*eta,0,0,0,2*xi,0,6*xi*eta,0, 2*xi*xi,0,6*xi*xi*eta};
  
  memset(values, 0.0, 2*nBF*SizeOfDouble); // 2 is the space dimension
  for(int i=0; i<nBF; i++)
  {
    for(int j=0; j<nBF; j++)
    {
      values[i    ] += N_Q_RT2_2D_CM[i+j*nBF]*mon_x[j];
      values[i+nBF] += N_Q_RT2_2D_CM[i+j*nBF]*mon_y[j];
    }
  }
}

// values of derivatives in xi-eta direction
static void N_Q_RT2_2D_DeriveXiEta(double xi, double eta, double *values)
{
  int nBF = 24; // number of basis functions
  // monomials x-component and y-component
  double mon_x[24]={0,0,0,0,0,0,0,0,0,0,1,0,0,0,2*xi,0,2*eta,0,3*xi*xi,0,4*xi*eta, 0,6*xi*xi*eta,0};
  double mon_y[24]={0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2*xi,0,2*eta,0,3*eta*eta,0, 4*xi*eta,0,6*xi*eta*eta};
  
  memset(values, 0.0, 2*nBF*SizeOfDouble); // 2 is the space dimension
  for(int i=0; i<nBF; i++)
  {
    for(int j=0; j<nBF; j++)
    {
      values[i    ] += N_Q_RT2_2D_CM[i+j*nBF]*mon_x[j];
      values[i+nBF] += N_Q_RT2_2D_CM[i+j*nBF]*mon_y[j];
    }
  }
}


// ***********************************************************************

TBaseFunct2D *BF_N_Q_RT2_2D_Obj = new TBaseFunct2D
        (24, BF_N_Q_RT2_2D, BFUnitSquare, 
         N_Q_RT2_2D_Funct, N_Q_RT2_2D_DeriveXi,
         N_Q_RT2_2D_DeriveEta, N_Q_RT2_2D_DeriveXiXi,
         N_Q_RT2_2D_DeriveXiEta, N_Q_RT2_2D_DeriveEtaEta, 4, 3,
         0, NULL, 2);
