// ======================================================================
// sharp characteristic interior layer
// Knopp, Lube, Rapin, CMAME 2002
// ======================================================================
#define __TWO_INTERIOR_LAYERS__
// #include <ConvDiff2D.h>
#include <Joint.h>
#include <BoundEdge.h>
#include <BoundComp.h>
#include <FE2D.h>
#include <FEDesc2D.h>

void ExampleFile()
{
  OutPut("Example: TimeTwoInteriorLayers.h" << endl); 
  OutPut("__MOVINGMESH__" << endl); 
  
#ifdef  __CONSERVATIVEALE__  
  TDatabase::ParamDB->P6 = 1;// con-ALE
  OutPut("Conservative ALE form with, that is, with - div w" << endl);   
#else
  TDatabase::ParamDB->P6=0;// non-conservative ALE
  OutPut("Non-Conservative ALE form, that is, witout - div w term" << endl);  
#endif
  
#ifdef  __CONSISTANTSUPG__  
  TDatabase::ParamDB->REACTOR_P28=1;// consist-SUPG
  OutPut("Consistant SUPG ALE form" << endl);  
#else
  TDatabase::ParamDB->REACTOR_P28=0;// in consist-SUPG
  OutPut("IN-Consistant SUPG ALE form" << endl);    
#endif
  
  if(TDatabase::ParamDB->P6==1) // con-ALE
   {
    OutPut("Conservative ALE form with, that is, with - div w" << endl); 
   }
  else// non-conservative ALE
   {
    OutPut("Non-Conservative ALE form, that is, witout - div w term" << endl); 
   }
   
   
}

// exact solution
void Exact(double x, double y, double *values)
{

  values[0]= 0;
  values[1]= 0;
  values[2]= 0;
  values[3]= 0;
}

// kind of boundary condition (for FE space needed)
void BoundCondition(int i, double t, BoundCond &cond)
{
    if (i==3)
	cond = NEUMANN;
    else
	cond = DIRICHLET;
}

// value of boundary condition
void BoundValue(int BdComp, double Param, double &value)
{
    
  double x = value;
    
   if (BdComp==0)
   {
      if ((x>1.0/3.0)&& (x<2.0/3.0))
         value = 1;
      else
         value = 0;
   }
   else
      value = 0;
}

// initial conditon
void InitialCondition(double x,  double y, double *values)
{
  values[0] = 0.;
}


void ModifyCoords(double x, double y, double &X, double &Y, double t, double &W1, double &W2)
{
//  double t = TDatabase::TimeDB->CURRENTTIME; 
//  double tau = TDatabase::TimeDB->CURRENTTIMESTEPLENGTH; 
 double r,d, norm, r1, n1, n2;
 
//   d = 2. - cos(20.*Pi*t);
  d = 1;
   
 X = x*d;
 Y = y*d;
 
 // mesh velocity
 W1 = (20.*Pi*x*sin(20.*Pi*t))/d;
 W2 = (20.*Pi*y*sin(20.*Pi*t))/d;
 
//    cout << X << " x, y " << Y  << endl;
}

  
void ModifyCoords(double x, double y, double &X, double &Y, double t)
{
//  double t = TDatabase::TimeDB->CURRENTTIME; 
//  double tau = TDatabase::TimeDB->CURRENTTIMESTEPLENGTH; 
 double r,d, norm, r1, n1, n2;
 
  d = 1.125 - 0.125*cos(5.*Pi*t);
//   d = 1;
  
 X = x*d;
 Y = y*d;
   
}
    
  
void BilinearCoeffs(int n_points, double *X, double *Y,
        double **parameters, double **coeffs)
{
  static double eps=1./TDatabase::ParamDB->PE_NR;
  int i;
  double *coeff, val[4];
  double x, y;

  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];
    x = X[i];
    y = Y[i];

    coeff[0] = eps;
    coeff[1] = -y;
    coeff[2] = x;
    coeff[3] = 0;
    coeff[4] = 0;
    coeff[5] = sqrt(x*x + y*y);    
  }
}

// kind of boundary condition (for FE space needed)
void GridBoundCondition(int BdComp, double t, BoundCond &cond)
{
  cond = DIRICHLET;
}

// value of boundary condition
void GridBoundValue(int BdComp, double Param, double &value)
{
  value = 0;
}

void GridCoeffs(int n_points, double *x, double *y,
        double **parameters, double **coeffs)
{
  int i;
  double *coeff;

  for(i=0;i<n_points;i++)
  {
    coeff = coeffs[i];
    coeff[0] = 1;

    coeff[1] = 0;
    coeff[2] = 0;
    coeff[3] = 0;

    coeff[4] = 0;
  }
}

void ComputeExtremalValues(int N, double *sol, double  *values)
{
   int i;
   double max, min, l2min=0, l2max=0;

   min = 1e10;
   max = -1e10;
   
   for(i=0;i<N;i++)
   {
      if(sol[i] > max)
         max = sol[i];
      if(sol[i] < min)
         min = sol[i];
      if(sol[i]>1)
	l2max+=(sol[i]-1)*(sol[i]-1);
      if(sol[i]<0)
	l2min+=sol[i]*sol[i];
   }

   values[0] = fabs(min);
   values[1] = fabs(max-1);
   values[2] = sqrt(l2min);
   values[3] = sqrt(l2max);
}
   
/** compute curve of the outflow boundary */
void ComputeOutflowBoundary(int level, TFEFunction2D *ufct)
{
    /*const int max_bound_points = 10000;
  int i,j,k, N_Cells;
  double xi, eta;
  TBaseCell *cell;
  TCollection *Coll;
  FE2D FE_ID;
  TFE2D *FE_Obj;
  RefTrans2D RefTrans;
  TBaseFunct2D *bf;
  int N_BaseFunct;
  TFESpace2D *FESpace2D;
  double *uorig, *uxorig, *uyorig, *uref, *uxiref, *uetaref, *u1;
  TJoint *joint;
  TBoundEdge *boundedge;
  TBoundComp *BoundComp;
  
  int *Numbers, comp, found, N_Edges;
  double u, ux, uy, x, y, *Values;
  double val, x_min, val_min,  x_max, val_max, eps=1e-10;
  double y_coord[max_bound_points], uval[max_bound_points], min;
  int *GlobalNumbers, *BeginIndex, bound_points, index;

  FESpace2D = ufct->GetFESpace2D();
  BeginIndex = FESpace2D->GetBeginIndex();
  GlobalNumbers = FESpace2D->GetGlobalNumbers();
  Values = ufct->GetValues();  

  Coll = FESpace2D->GetCollection();
  N_Cells = Coll->GetN_Cells();

  bound_points = 0;
  for(i=0;i<N_Cells;i++)
  {
    cell = Coll->GetCell(i);
    N_Edges=cell->GetN_Edges();
    found = 0;
    for(j=0;j<N_Edges;j++)              // loop over all edges of cell
    {                                   // find edges on boundary part 3  
      joint=cell->GetJoint(j);          // this is x=0   
      if ((joint->GetType() == BoundaryEdge)||
          (joint->GetType() == IsoBoundEdge)) // boundary edge 
      {
        
        boundedge=(TBoundEdge *)joint;  
        BoundComp=boundedge->GetBoundComp();  // get boundary component
        comp=BoundComp->GetID();              // boundary id 
        if (comp==3)
        {
          found = 1;
          break;
        }
      }
    }

    if (!found) continue;

    FE_ID = FESpace2D->GetFE2D(i, cell);
    FE_Obj = TFEDatabase2D::GetFE2D(FE_ID);
    RefTrans = FE_Obj->GetRefTransID();

    // get base function object
    bf = FE_Obj->GetBaseFunct2D();
    N_BaseFunct = bf->GetDimension();
    
    uorig = new double[N_BaseFunct];
    uxorig = new double[N_BaseFunct];
    uyorig = new double[N_BaseFunct];
    
    uref = new double[N_BaseFunct];
    uxiref = new double[N_BaseFunct];
    uetaref = new double[N_BaseFunct];
    
    // set cell for reference transformation
    TFEDatabase2D::SetCellForRefTrans(cell, RefTrans);
    for (j=0;j<N_Edges;j++)
    {
      // check all vertices if they are on the boundary 
      x = cell->GetVertex(j)->GetX();
      // point not on boundary
      if (fabs(x)>eps)
         continue;    
      y = cell->GetVertex(j)->GetY();
      //check if this node is already in the array of boundpoints
      found = 0;
      for (k=bound_points-1;k>=0; k--)
      {
         if (fabs(y- y_coord[k]) < eps)
         {
            found = 1;
            break;
         }
      }
      if (found)
         continue;
      // new node
      y_coord[bound_points] = y;
      bound_points++;      
      if ( bound_points > max_bound_points)
      {
         OutPut("TwoInteriorLeyers.h: maximal number of boundary points reached !!!" << endl);
         exit(4711);
      }
      // find local coordinates of the given point
      //cout << " x: " << x << endl;
      //cout << " y: " << y << endl;
      TFEDatabase2D::GetRefFromOrig(RefTrans, x, y, xi, eta);
      //cout << " xi: " << xi << endl;
      //cout << "eta: " << eta << endl;

      bf->GetDerivatives(D00, xi, eta, uref);
      bf->GetDerivatives(D10, xi, eta, uxiref);
      bf->GetDerivatives(D01, xi, eta, uetaref);
      
      TFEDatabase2D::GetOrigValues(RefTrans, xi, eta, bf, (TGridCell *)cell,
                uref, uxiref, uetaref, uorig, uxorig, uyorig);

      u = 0;
      Numbers = GlobalNumbers + BeginIndex[i];
      for(k=0;k<N_BaseFunct;k++)
      {
        val = Values[Numbers[k]];
        u += uorig[k]*val;
      }
      //OutPut(x << " " << y << " " << u << endl);
      uval[bound_points-1] = u;
    } // endfor 
    delete uorig;
    delete uxorig;
    delete uyorig;
    delete uref;
    delete uxiref;
    delete uetaref;
  } // endfor
  // order the arrays

  for (i=0;i<bound_points; i++)
  {
     min = 1e6;
     for(j=i;j<bound_points; j++)
     {
        if (y_coord[j]< min)
        {
           min = y_coord[j];
           index = j;
        }
     }
     // change the entries
     y_coord[index] = y_coord[i];
     y_coord[i] = min;
     val = uval[i];
     uval[i] = uval[index];
     uval[index] = val;
  }
  for (i=0;i<bound_points; i++)
  {
     OutPut("outflow " << level << " " <<  y_coord[i] << 
            " " <<  uval[i] << endl);
  }
    */
  double h, x=0,values[3],y;
  int i, bound_points = 201;
  h = 1.0/(bound_points-1);
  for (i=0;i<bound_points; i++)
  {
      y = i*h;
      ufct->FindGradient(x,y,values);
      OutPut("outflow " << level << " " <<  y <<  " " <<  values[0] << endl);
      
//    os.seekp(std::ios::beg);      
  }
}

/** compute curve of the outflow boundary */
void ComputeDiagonal(int level, TFEFunction2D *ufct)
{
  const int max_bound_points = 10001;
  int i,j,k, N_Cells;
  double xi, eta;
  TBaseCell *cell;
  TCollection *Coll;
  FE2D FE_ID;
  TFE2D *FE_Obj;
  RefTrans2D RefTrans;
  TBaseFunct2D *bf;
  int N_BaseFunct;
  TFESpace2D *FESpace2D;
  double *uorig, *uxorig, *uyorig, *uref, *uxiref, *uetaref, *u1;
  TJoint *joint;
  TBoundEdge *boundedge;
  TBoundComp *BoundComp;
  
  int *Numbers, comp, found, N_Edges, N_add, diag =0;
  double u, ux, uy, x, y, *Values, x_add;
  double val, x_min, val_min,  x_max, val_max, eps=1e-10;
  double y_coord[max_bound_points], uval[max_bound_points], min;
  int *GlobalNumbers, *BeginIndex, bound_points, index;

  FESpace2D = ufct->GetFESpace2D();
  BeginIndex = FESpace2D->GetBeginIndex();
  GlobalNumbers = FESpace2D->GetGlobalNumbers();
  Values = ufct->GetValues();  

  Coll = FESpace2D->GetCollection();
  N_Cells = Coll->GetN_Cells();

  bound_points = 0;
  for(i=0;i<N_Cells;i++)
  {
    cell = Coll->GetCell(i);
    N_Edges=cell->GetN_Edges();
    found = 0;

    FE_ID = FESpace2D->GetFE2D(i, cell);
    FE_Obj = TFEDatabase2D::GetFE2D(FE_ID);
    RefTrans = FE_Obj->GetRefTransID();

    // get base function object
    bf = FE_Obj->GetBaseFunct2D();
    N_BaseFunct = bf->GetDimension();
    
    uorig = new double[N_BaseFunct];
    uxorig = new double[N_BaseFunct];
    uyorig = new double[N_BaseFunct];
    
    uref = new double[N_BaseFunct];
    uxiref = new double[N_BaseFunct];
    uetaref = new double[N_BaseFunct];
    
    // set cell for reference transformation
    TFEDatabase2D::SetCellForRefTrans(cell, RefTrans);
    x_add = 0;
    N_add = 0;
    diag = 0;
    for (j=0;j<=N_Edges;j++)
    {
      // check all vertices if they are on the boundary 
      if (j <  N_Edges)
      {
         x = cell->GetVertex(j)->GetX();
         y = cell->GetVertex(j)->GetY();
         //check if this node is already in the array of boundpoints
         if (fabs(x-y)>eps)
            continue;
         x_add += x;
         N_add++;
      }
      else
      {
         // no mesh cell on the diagonal
         if (!diag)
            continue;
         else
         {
            x = x_add/N_add;
            y = x;
         }
      }
      diag++;
      found = 0;
      for (k=bound_points-1;k>=0; k--)
      {
         if (fabs(y- y_coord[k]) < eps)
         {
            found = 1;
            break;
         }
      }
      if (found)
         continue;
      // new node
      y_coord[bound_points] = y;
      bound_points++;      
      if ( bound_points > max_bound_points)
      {
         OutPut("TwoInteriorLeyers.h: maximal number of boundary points reached !!!" << endl);
         exit(4711);
      }
      // find local coordinates of the given point
      //cout << " x: " << x << endl;
      //cout << " y: " << y << endl;
      TFEDatabase2D::GetRefFromOrig(RefTrans, x, y, xi, eta);
      //cout << " xi: " << xi << endl;
      //cout << "eta: " << eta << endl;

      bf->GetDerivatives(D00, xi, eta, uref);
      bf->GetDerivatives(D10, xi, eta, uxiref);
      bf->GetDerivatives(D01, xi, eta, uetaref);
      
      TFEDatabase2D::GetOrigValues(RefTrans, xi, eta, bf, Coll, (TGridCell *)cell,
                uref, uxiref, uetaref, uorig, uxorig, uyorig);

      u = 0;
      Numbers = GlobalNumbers + BeginIndex[i];
      for(k=0;k<N_BaseFunct;k++)
      {
        val = Values[Numbers[k]];
        u += uorig[k]*val;
      }
      //OutPut(x << " " << y << " " << u << endl);
      uval[bound_points-1] = u;
    } // endfor 
    delete uorig;
    delete uxorig;
    delete uyorig;
    delete uref;
    delete uxiref;
    delete uetaref;
  } // endfor
  // order the arrays

  for (i=0;i<bound_points; i++)
  {
     min = 1e6;
     for(j=i;j<bound_points; j++)
     {
        if (y_coord[j]< min)
        {
           min = y_coord[j];
           index = j;
        }
     }
     // change the entries
     y_coord[index] = y_coord[i];
     y_coord[i] = min;
     val = uval[i];
     uval[i] = uval[index];
     uval[index] = val;
  }
  for (i=0;i<bound_points; i++)
  {
     OutPut("diagonal " << level << " " <<  y_coord[i]*sqrt(2.0) << 
            " " <<  uval[i] << endl);
  }
}

void OutflowBoundaryReference(double* &reference)
{

double ref[4098] =
    {
 0.000000e+00, 0.000000e+00,
 4.882812e-04, 3.991896e-26,
 9.765625e-04, 7.992119e-26,
 1.464844e-03, 1.200097e-25,
 1.953125e-03, 1.601583e-25,
 2.441406e-03, 2.003177e-25,
 2.929688e-03, 2.404335e-25,
 3.417969e-03, 2.804314e-25,
 3.906250e-03, 3.202451e-25,
 4.394531e-03, 3.598062e-25,
 4.882812e-03, 3.990439e-25,
 5.371094e-03, 4.378650e-25,
 5.859375e-03, 4.761980e-25,
 6.347656e-03, 5.139610e-25,
 6.835938e-03, 5.510863e-25,
 7.324219e-03, 5.874849e-25,
 7.812500e-03, 6.230974e-25,
 8.300781e-03, 6.578733e-25,
 8.789062e-03, 6.917615e-25,
 9.277344e-03, 7.246716e-25,
 9.765625e-03, 7.565609e-25,
 1.025391e-02, 7.873572e-25,
 1.074219e-02, 8.170297e-25,
 1.123047e-02, 8.454970e-25,
 1.171875e-02, 8.727269e-25,
 1.220703e-02, 8.987179e-25,
 1.269531e-02, 9.234488e-25,
 1.318359e-02, 9.468595e-25,
 1.367188e-02, 9.689458e-25,
 1.416016e-02, 9.896876e-25,
 1.464844e-02, 1.009099e-24,
 1.513672e-02, 1.027151e-24,
 1.562500e-02, 1.043877e-24,
 1.611328e-02, 1.059330e-24,
 1.660156e-02, 1.073559e-24,
 1.708984e-02, 1.086537e-24,
 1.757812e-02, 1.098325e-24,
 1.806641e-02, 1.108930e-24,
 1.855469e-02, 1.118429e-24,
 1.904297e-02, 1.126815e-24,
 1.953125e-02, 1.134165e-24,
 2.001953e-02, 1.140576e-24,
 2.050781e-02, 1.146144e-24,
 2.099609e-02, 1.150871e-24,
 2.148438e-02, 1.154858e-24,
 2.197266e-02, 1.158168e-24,
 2.246094e-02, 1.160915e-24,
 2.294922e-02, 1.163145e-24,
 2.343750e-02, 1.164981e-24,
 2.392578e-02, 1.166604e-24,
 2.441406e-02, 1.168145e-24,
 2.490234e-02, 1.169647e-24,
 2.539062e-02, 1.171256e-24,
 2.587891e-02, 1.173047e-24,
 2.636719e-02, 1.175184e-24,
 2.685547e-02, 1.177702e-24,
 2.734375e-02, 1.180742e-24,
 2.783203e-02, 1.184505e-24,
 2.832031e-02, 1.189138e-24,
 2.880859e-02, 1.194687e-24,
 2.929688e-02, 1.201311e-24,
 2.978516e-02, 1.209122e-24,
 3.027344e-02, 1.218300e-24,
 3.076172e-02, 1.228910e-24,
 3.125000e-02, 1.241140e-24,
 3.173828e-02, 1.255209e-24,
 3.222656e-02, 1.271322e-24,
 3.271484e-02, 1.289501e-24,
 3.320312e-02, 1.309942e-24,
 3.369141e-02, 1.332711e-24,
 3.417969e-02, 1.358033e-24,
 3.466797e-02, 1.385907e-24,
 3.515625e-02, 1.416506e-24,
 3.564453e-02, 1.450030e-24,
 3.613281e-02, 1.486684e-24,
 3.662109e-02, 1.526428e-24,
 3.710938e-02, 1.569432e-24,
 3.759766e-02, 1.615758e-24,
 3.808594e-02, 1.665588e-24,
 3.857422e-02, 1.718886e-24,
 3.906250e-02, 1.775799e-24,
 3.955078e-02, 1.836517e-24,
 4.003906e-02, 1.901228e-24,
 4.052734e-02, 1.969765e-24,
 4.101562e-02, 2.042256e-24,
 4.150391e-02, 2.118575e-24,
 4.199219e-02, 2.198884e-24,
 4.248047e-02, 2.282893e-24,
 4.296875e-02, 2.370561e-24,
 4.345703e-02, 2.461994e-24,
 4.394531e-02, 2.557138e-24,
 4.443359e-02, 2.655587e-24,
 4.492188e-02, 2.757234e-24,
 4.541016e-02, 2.861775e-24,
 4.589844e-02, 2.969095e-24,
 4.638672e-02, 3.078643e-24,
 4.687500e-02, 3.190118e-24,
 4.736328e-02, 3.303428e-24,
 4.785156e-02, 3.418237e-24,
 4.833984e-02, 3.533724e-24,
 4.882812e-02, 3.649473e-24,
 4.931641e-02, 3.764655e-24,
 4.980469e-02, 3.878916e-24,
 5.029297e-02, 3.991118e-24,
 5.078125e-02, 4.100557e-24,
 5.126953e-02, 4.206592e-24,
 5.175781e-02, 4.308608e-24,
 5.224609e-02, 4.405233e-24,
 5.273438e-02, 4.495654e-24,
 5.322266e-02, 4.578772e-24,
 5.371094e-02, 4.653807e-24,
 5.419922e-02, 4.719423e-24,
 5.468750e-02, 4.774714e-24,
 5.517578e-02, 4.819168e-24,
 5.566406e-02, 4.852043e-24,
 5.615234e-02, 4.872102e-24,
 5.664062e-02, 4.878787e-24,
 5.712891e-02, 4.871265e-24,
 5.761719e-02, 4.849448e-24,
 5.810547e-02, 4.812655e-24,
 5.859375e-02, 4.760983e-24,
 5.908203e-02, 4.695146e-24,
 5.957031e-02, 4.615980e-24,
 6.005859e-02, 4.524211e-24,
 6.054688e-02, 4.421600e-24,
 6.103516e-02, 4.310257e-24,
 6.152344e-02, 4.193273e-24,
 6.201172e-02, 4.073943e-24,
 6.250000e-02, 3.956871e-24,
 6.298828e-02, 3.847711e-24,
 6.347656e-02, 3.753265e-24,
 6.396484e-02, 3.680609e-24,
 6.445312e-02, 3.638878e-24,
 6.494141e-02, 3.637894e-24,
 6.542969e-02, 3.690054e-24,
 6.591797e-02, 3.807881e-24,
 6.640625e-02, 4.006407e-24,
 6.689453e-02, 4.302512e-24,
 6.738281e-02, 4.715798e-24,
 6.787109e-02, 5.265762e-24,
 6.835938e-02, 5.975854e-24,
 6.884766e-02, 6.870429e-24,
 6.933594e-02, 7.977892e-24,
 6.982422e-02, 9.326100e-24,
 7.031250e-02, 1.094686e-23,
 7.080078e-02, 1.287473e-23,
 7.128906e-02, 1.514963e-23,
 7.177734e-02, 1.780737e-23,
 7.226562e-02, 2.089181e-23,
 7.275391e-02, 2.444356e-23,
 7.324219e-02, 2.851567e-23,
 7.373047e-02, 3.314947e-23,
 7.421875e-02, 3.839363e-23,
 7.470703e-02, 4.430228e-23,
 7.519531e-02, 5.092956e-23,
 7.568359e-02, 5.831868e-23,
 7.617188e-02, 6.652434e-23,
 7.666016e-02, 7.559200e-23,
 7.714844e-02, 8.557765e-23,
 7.763672e-02, 9.651345e-23,
 7.812500e-02, 1.084381e-22,
 7.861328e-02, 1.213895e-22,
 7.910156e-02, 1.354143e-22,
 7.958984e-02, 1.505128e-22,
 8.007812e-02, 1.667083e-22,
 8.056641e-02, 1.839871e-22,
 8.105469e-02, 2.023720e-22,
 8.154297e-02, 2.218101e-22,
 8.203125e-02, 2.422616e-22,
 8.251953e-02, 2.636778e-22,
 8.300781e-02, 2.860148e-22,
 8.349609e-02, 3.091390e-22,
 8.398438e-02, 3.329448e-22,
 8.447266e-02, 3.572758e-22,
 8.496094e-02, 3.819841e-22,
 8.544922e-02, 4.068309e-22,
 8.593750e-02, 4.315757e-22,
 8.642578e-02, 4.559799e-22,
 8.691406e-02, 4.797549e-22,
 8.740234e-02, 5.025181e-22,
 8.789062e-02, 5.239058e-22,
 8.837891e-02, 5.434818e-22,
 8.886719e-02, 5.608417e-22,
 8.935547e-02, 5.754638e-22,
 8.984375e-02, 5.868378e-22,
 9.033203e-02, 5.944614e-22,
 9.082031e-02, 5.977915e-22,
 9.130859e-02, 5.962315e-22,
 9.179688e-02, 5.892037e-22,
 9.228516e-02, 5.761340e-22,
 9.277344e-02, 5.564548e-22,
 9.326172e-02, 5.296265e-22,
 9.375000e-02, 4.951506e-22,
 9.423828e-02, 4.525811e-22,
 9.472656e-02, 4.015256e-22,
 9.521484e-02, 3.417313e-22,
 9.570312e-02, 2.730121e-22,
 9.619141e-02, 1.954177e-22,
 9.667969e-02, 1.090304e-22,
 9.716797e-02, 1.437959e-23,
 9.765625e-02, -8.781477e-23,
 9.814453e-02, -1.965327e-22,
 9.863281e-02, -3.104733e-22,
 9.912109e-02, -4.276385e-22,
 9.960938e-02, -5.457184e-22,
 1.000977e-01, -6.617672e-22,
 1.005859e-01, -7.723223e-22,
 1.010742e-01, -8.730184e-22,
 1.015625e-01, -9.588045e-22,
 1.020508e-01, -1.023851e-21,
 1.025391e-01, -1.061272e-21,
 1.030273e-01, -1.063013e-21,
 1.035156e-01, -1.019857e-21,
 1.040039e-01, -9.214728e-22,
 1.044922e-01, -7.556983e-22,
 1.049805e-01, -5.094836e-22,
 1.054688e-01, -1.679706e-22,
 1.059570e-01, 2.854796e-22,
 1.064453e-01, 8.694371e-22,
 1.069336e-01, 1.603326e-21,
 1.074219e-01, 2.509516e-21,
 1.079102e-01, 3.611183e-21,
 1.083984e-01, 4.934952e-21,
 1.088867e-01, 6.506307e-21,
 1.093750e-01, 8.353638e-21,
 1.098633e-01, 1.050829e-20,
 1.103516e-01, 1.300314e-20,
 1.108398e-01, 1.586798e-20,
 1.113281e-01, 1.913846e-20,
 1.118164e-01, 2.284583e-20,
 1.123047e-01, 2.703195e-20,
 1.127930e-01, 3.172485e-20,
 1.132812e-01, 3.695809e-20,
 1.137695e-01, 4.276499e-20,
 1.142578e-01, 4.918333e-20,
 1.147461e-01, 5.622905e-20,
 1.152344e-01, 6.392694e-20,
 1.157227e-01, 7.228783e-20,
 1.162109e-01, 8.132514e-20,
 1.166992e-01, 9.102170e-20,
 1.171875e-01, 1.013564e-19,
 1.176758e-01, 1.123029e-19,
 1.181641e-01, 1.238114e-19,
 1.186523e-01, 1.357874e-19,
 1.191406e-01, 1.481316e-19,
 1.196289e-01, 1.607000e-19,
 1.201172e-01, 1.733407e-19,
 1.206055e-01, 1.858262e-19,
 1.210938e-01, 1.979023e-19,
 1.215820e-01, 2.092779e-19,
 1.220703e-01, 2.195906e-19,
 1.225586e-01, 2.283887e-19,
 1.230469e-01, 2.351499e-19,
 1.235352e-01, 2.392629e-19,
 1.240234e-01, 2.399976e-19,
 1.245117e-01, 2.365095e-19,
 1.250000e-01, 2.278168e-19,
 1.254883e-01, 2.127893e-19,
 1.259766e-01, 1.900451e-19,
 1.264648e-01, 1.580964e-19,
 1.269531e-01, 1.151593e-19,
 1.274414e-01, 5.931824e-20,
 1.279297e-01, -1.183820e-20,
 1.284180e-01, -1.006947e-19,
 1.289062e-01, -2.100557e-19,
 1.293945e-01, -3.430594e-19,
 1.298828e-01, -5.035010e-19,
 1.303711e-01, -6.950330e-19,
 1.308594e-01, -9.222023e-19,
 1.313477e-01, -1.189770e-18,
 1.318359e-01, -1.503540e-18,
 1.323242e-01, -1.869112e-18,
 1.328125e-01, -2.293111e-18,
 1.333008e-01, -2.782960e-18,
 1.337891e-01, -3.347720e-18,
 1.342773e-01, -3.995434e-18,
 1.347656e-01, -4.736594e-18,
 1.352539e-01, -5.581325e-18,
 1.357422e-01, -6.543627e-18,
 1.362305e-01, -7.634936e-18,
 1.367188e-01, -8.869466e-18,
 1.372070e-01, -1.026393e-17,
 1.376953e-01, -1.183646e-17,
 1.381836e-01, -1.360331e-17,
 1.386719e-01, -1.558578e-17,
 1.391602e-01, -1.780500e-17,
 1.396484e-01, -2.028775e-17,
 1.401367e-01, -2.305661e-17,
 1.406250e-01, -2.613943e-17,
 1.411133e-01, -2.956740e-17,
 1.416016e-01, -3.337906e-17,
 1.420898e-01, -3.760299e-17,
 1.425781e-01, -4.228082e-17,
 1.430664e-01, -4.744911e-17,
 1.435547e-01, -5.316395e-17,
 1.440430e-01, -5.946324e-17,
 1.445312e-01, -6.639844e-17,
 1.450195e-01, -7.402689e-17,
 1.455078e-01, -8.242053e-17,
 1.459961e-01, -9.162738e-17,
 1.464844e-01, -1.017216e-16,
 1.469727e-01, -1.127715e-16,
 1.474609e-01, -1.248691e-16,
 1.479492e-01, -1.380805e-16,
 1.484375e-01, -1.524922e-16,
 1.489258e-01, -1.682130e-16,
 1.494141e-01, -1.853541e-16,
 1.499023e-01, -2.039942e-16,
 1.503906e-01, -2.242572e-16,
 1.508789e-01, -2.462426e-16,
 1.513672e-01, -2.701236e-16,
 1.518555e-01, -2.959916e-16,
 1.523438e-01, -3.239862e-16,
 1.528320e-01, -3.542856e-16,
 1.533203e-01, -3.870703e-16,
 1.538086e-01, -4.224543e-16,
 1.542969e-01, -4.606310e-16,
 1.547852e-01, -5.017699e-16,
 1.552734e-01, -5.461145e-16,
 1.557617e-01, -5.938055e-16,
 1.562500e-01, -6.450512e-16,
 1.567383e-01, -7.000900e-16,
 1.572266e-01, -7.592253e-16,
 1.577148e-01, -8.225735e-16,
 1.582031e-01, -8.904148e-16,
 1.586914e-01, -9.629310e-16,
 1.591797e-01, -1.040522e-15,
 1.596680e-01, -1.123318e-15,
 1.601562e-01, -1.211597e-15,
 1.606445e-01, -1.305681e-15,
 1.611328e-01, -1.406002e-15,
 1.616211e-01, -1.512672e-15,
 1.621094e-01, -1.626060e-15,
 1.625977e-01, -1.746438e-15,
 1.630859e-01, -1.874266e-15,
 1.635742e-01, -2.009699e-15,
 1.640625e-01, -2.153068e-15,
 1.645508e-01, -2.304773e-15,
 1.650391e-01, -2.465345e-15,
 1.655273e-01, -2.634792e-15,
 1.660156e-01, -2.813532e-15,
 1.665039e-01, -3.001715e-15,
 1.669922e-01, -3.199993e-15,
 1.674805e-01, -3.408324e-15,
 1.679688e-01, -3.626998e-15,
 1.684570e-01, -3.856542e-15,
 1.689453e-01, -4.097385e-15,
 1.694336e-01, -4.349402e-15,
 1.699219e-01, -4.612940e-15,
 1.704102e-01, -4.888145e-15,
 1.708984e-01, -5.175514e-15,
 1.713867e-01, -5.474826e-15,
 1.718750e-01, -5.786187e-15,
 1.723633e-01, -6.110005e-15,
 1.728516e-01, -6.446445e-15,
 1.733398e-01, -6.794842e-15,
 1.738281e-01, -7.155158e-15,
 1.743164e-01, -7.526858e-15,
 1.748047e-01, -7.910181e-15,
 1.752930e-01, -8.304074e-15,
 1.757812e-01, -8.708073e-15,
 1.762695e-01, -9.121805e-15,
 1.767578e-01, -9.544981e-15,
 1.772461e-01, -9.975999e-15,
 1.777344e-01, -1.041401e-14,
 1.782227e-01, -1.085773e-14,
 1.787109e-01, -1.130616e-14,
 1.791992e-01, -1.175724e-14,
 1.796875e-01, -1.220925e-14,
 1.801758e-01, -1.266070e-14,
 1.806641e-01, -1.310944e-14,
 1.811523e-01, -1.355215e-14,
 1.816406e-01, -1.398596e-14,
 1.821289e-01, -1.440736e-14,
 1.826172e-01, -1.481294e-14,
 1.831055e-01, -1.519813e-14,
 1.835938e-01, -1.555852e-14,
 1.840820e-01, -1.588960e-14,
 1.845703e-01, -1.618589e-14,
 1.850586e-01, -1.644100e-14,
 1.855469e-01, -1.664811e-14,
 1.860352e-01, -1.679985e-14,
 1.865234e-01, -1.688761e-14,
 1.870117e-01, -1.690229e-14,
 1.875000e-01, -1.683379e-14,
 1.879883e-01, -1.667060e-14,
 1.884766e-01, -1.639919e-14,
 1.889648e-01, -1.600544e-14,
 1.894531e-01, -1.547230e-14,
 1.899414e-01, -1.478197e-14,
 1.904297e-01, -1.391082e-14,
 1.909180e-01, -1.283683e-14,
 1.914062e-01, -1.153340e-14,
 1.918945e-01, -9.969948e-15,
 1.923828e-01, -8.108318e-15,
 1.928711e-01, -5.911754e-15,
 1.933594e-01, -3.332645e-15,
 1.938477e-01, -3.184379e-16,
 1.943359e-01, 3.196628e-15,
 1.948242e-01, 7.280839e-15,
 1.953125e-01, 1.201768e-14,
 1.958008e-01, 1.750619e-14,
 1.962891e-01, 2.386872e-14,
 1.967773e-01, 3.123283e-14,
 1.972656e-01, 3.976216e-14,
 1.977539e-01, 4.964139e-14,
 1.982422e-01, 6.110863e-14,
 1.987305e-01, 7.441959e-14,
 1.992188e-01, 8.989017e-14,
 1.997070e-01, 1.079045e-13,
 2.001953e-01, 1.289184e-13,
 2.006836e-01, 1.534530e-13,
 2.011719e-01, 1.821522e-13,
 2.016602e-01, 2.157766e-13,
 2.021484e-01, 2.552534e-13,
 2.026367e-01, 3.016572e-13,
 2.031250e-01, 3.562905e-13,
 2.036133e-01, 4.207166e-13,
 2.041016e-01, 4.968229e-13,
 2.045898e-01, 5.868058e-13,
 2.050781e-01, 6.933417e-13,
 2.055664e-01, 8.196017e-13,
 2.060547e-01, 9.694409e-13,
 2.065430e-01, 1.147378e-12,
 2.070312e-01, 1.358857e-12,
 2.075195e-01, 1.610391e-12,
 2.080078e-01, 1.909787e-12,
 2.084961e-01, 2.266260e-12,
 2.089844e-01, 2.690883e-12,
 2.094727e-01, 3.196833e-12,
 2.099609e-01, 3.799869e-12,
 2.104492e-01, 4.518665e-12,
 2.109375e-01, 5.375502e-12,
 2.114258e-01, 6.396945e-12,
 2.119141e-01, 7.614563e-12,
 2.124023e-01, 9.065753e-12,
 2.128906e-01, 1.079506e-11,
 2.133789e-01, 1.285529e-11,
 2.138672e-01, 1.530924e-11,
 2.143555e-01, 1.823116e-11,
 2.148438e-01, 2.170910e-11,
 2.153320e-01, 2.584741e-11,
 2.158203e-01, 3.076955e-11,
 2.163086e-01, 3.662129e-11,
 2.167969e-01, 4.357511e-11,
 2.172852e-01, 5.183460e-11,
 2.177734e-01, 6.164020e-11,
 2.182617e-01, 7.327519e-11,
 2.187500e-01, 8.707355e-11,
 2.192383e-01, 1.034288e-10,
 2.197266e-01, 1.228038e-10,
 2.202148e-01, 1.457430e-10,
 2.207031e-01, 1.728862e-10,
 2.211914e-01, 2.049850e-10,
 2.216797e-01, 2.429215e-10,
 2.221680e-01, 2.877300e-10,
 2.226562e-01, 3.406228e-10,
 2.231445e-01, 4.030200e-10,
 2.236328e-01, 4.765835e-10,
 2.241211e-01, 5.632564e-10,
 2.246094e-01, 6.653098e-10,
 2.250977e-01, 7.853962e-10,
 2.255859e-01, 9.266110e-10,
 2.260742e-01, 1.092563e-09,
 2.265625e-01, 1.287460e-09,
 2.270508e-01, 1.516198e-09,
 2.275391e-01, 1.784478e-09,
 2.280273e-01, 2.098926e-09,
 2.285156e-01, 2.467243e-09,
 2.290039e-01, 2.898369e-09,
 2.294922e-01, 3.402679e-09,
 2.299805e-01, 3.992197e-09,
 2.304688e-01, 4.680858e-09,
 2.309570e-01, 5.484792e-09,
 2.314453e-01, 6.422660e-09,
 2.319336e-01, 7.516031e-09,
 2.324219e-01, 8.789822e-09,
 2.329102e-01, 1.027279e-08,
 2.333984e-01, 1.199812e-08,
 2.338867e-01, 1.400403e-08,
 2.343750e-01, 1.633456e-08,
 2.348633e-01, 1.904038e-08,
 2.353516e-01, 2.217976e-08,
 2.358398e-01, 2.581966e-08,
 2.363281e-01, 3.003697e-08,
 2.368164e-01, 3.491991e-08,
 2.373047e-01, 4.056960e-08,
 2.377930e-01, 4.710194e-08,
 2.382812e-01, 5.464954e-08,
 2.387695e-01, 6.336416e-08,
 2.392578e-01, 7.341921e-08,
 2.397461e-01, 8.501279e-08,
 2.402344e-01, 9.837097e-08,
 2.407227e-01, 1.137515e-07,
 2.412109e-01, 1.314483e-07,
 2.416992e-01, 1.517958e-07,
 2.421875e-01, 1.751747e-07,
 2.426758e-01, 2.020175e-07,
 2.431641e-01, 2.328160e-07,
 2.436523e-01, 2.681282e-07,
 2.441406e-01, 3.085869e-07,
 2.446289e-01, 3.549096e-07,
 2.451172e-01, 4.079086e-07,
 2.456055e-01, 4.685032e-07,
 2.460938e-01, 5.377330e-07,
 2.465820e-01, 6.167724e-07,
 2.470703e-01, 7.069474e-07,
 2.475586e-01, 8.097537e-07,
 2.480469e-01, 9.268772e-07,
 2.485352e-01, 1.060217e-06,
 2.490234e-01, 1.211910e-06,
 2.495117e-01, 1.384359e-06,
 2.500000e-01, 1.580264e-06,
 2.504883e-01, 1.802656e-06,
 2.509766e-01, 2.054937e-06,
 2.514648e-01, 2.340918e-06,
 2.519531e-01, 2.664868e-06,
 2.524414e-01, 3.031565e-06,
 2.529297e-01, 3.446353e-06,
 2.534180e-01, 3.915200e-06,
 2.539062e-01, 4.444771e-06,
 2.543945e-01, 5.042500e-06,
 2.548828e-01, 5.716673e-06,
 2.553711e-01, 6.476518e-06,
 2.558594e-01, 7.332305e-06,
 2.563477e-01, 8.295451e-06,
 2.568359e-01, 9.378641e-06,
 2.573242e-01, 1.059596e-05,
 2.578125e-01, 1.196301e-05,
 2.583008e-01, 1.349712e-05,
 2.587891e-01, 1.521744e-05,
 2.592773e-01, 1.714518e-05,
 2.597656e-01, 1.930377e-05,
 2.602539e-01, 2.171911e-05,
 2.607422e-01, 2.441977e-05,
 2.612305e-01, 2.743725e-05,
 2.617188e-01, 3.080627e-05,
 2.622070e-01, 3.456504e-05,
 2.626953e-01, 3.875559e-05,
 2.631836e-01, 4.342412e-05,
 2.636719e-01, 4.862133e-05,
 2.641602e-01, 5.440287e-05,
 2.646484e-01, 6.082974e-05,
 2.651367e-01, 6.796874e-05,
 2.656250e-01, 7.589297e-05,
 2.661133e-01, 8.468236e-05,
 2.666016e-01, 9.442421e-05,
 2.670898e-01, 1.052138e-04,
 2.675781e-01, 1.171551e-04,
 2.680664e-01, 1.303613e-04,
 2.685547e-01, 1.449556e-04,
 2.690430e-01, 1.610721e-04,
 2.695312e-01, 1.788565e-04,
 2.700195e-01, 1.984669e-04,
 2.705078e-01, 2.200749e-04,
 2.709961e-01, 2.438664e-04,
 2.714844e-01, 2.700428e-04,
 2.719727e-01, 2.988218e-04,
 2.724609e-01, 3.304389e-04,
 2.729492e-01, 3.651483e-04,
 2.734375e-01, 4.032242e-04,
 2.739258e-01, 4.449623e-04,
 2.744141e-01, 4.906811e-04,
 2.749023e-01, 5.407230e-04,
 2.753906e-01, 5.954564e-04,
 2.758789e-01, 6.552766e-04,
 2.763672e-01, 7.206079e-04,
 2.768555e-01, 7.919053e-04,
 2.773438e-01, 8.696557e-04,
 2.778320e-01, 9.543804e-04,
 2.783203e-01, 1.046636e-03,
 2.788086e-01, 1.147018e-03,
 2.792969e-01, 1.256160e-03,
 2.797852e-01, 1.374740e-03,
 2.802734e-01, 1.503476e-03,
 2.807617e-01, 1.643135e-03,
 2.812500e-01, 1.794531e-03,
 2.817383e-01, 1.958528e-03,
 2.822266e-01, 2.136043e-03,
 2.827148e-01, 2.328045e-03,
 2.832031e-01, 2.535564e-03,
 2.836914e-01, 2.759685e-03,
 2.841797e-01, 3.001556e-03,
 2.846680e-01, 3.262388e-03,
 2.851562e-01, 3.543457e-03,
 2.856445e-01, 3.846106e-03,
 2.861328e-01, 4.171750e-03,
 2.866211e-01, 4.521873e-03,
 2.871094e-01, 4.898034e-03,
 2.875977e-01, 5.301867e-03,
 2.880859e-01, 5.735082e-03,
 2.885742e-01, 6.199469e-03,
 2.890625e-01, 6.696899e-03,
 2.895508e-01, 7.229324e-03,
 2.900391e-01, 7.798777e-03,
 2.905273e-01, 8.407378e-03,
 2.910156e-01, 9.057330e-03,
 2.915039e-01, 9.750921e-03,
 2.919922e-01, 1.049053e-02,
 2.924805e-01, 1.127861e-02,
 2.929688e-01, 1.211771e-02,
 2.934570e-01, 1.301046e-02,
 2.939453e-01, 1.395958e-02,
 2.944336e-01, 1.496788e-02,
 2.949219e-01, 1.603822e-02,
 2.954102e-01, 1.717359e-02,
 2.958984e-01, 1.837702e-02,
 2.963867e-01, 1.965162e-02,
 2.968750e-01, 2.100061e-02,
 2.973633e-01, 2.242723e-02,
 2.978516e-01, 2.393483e-02,
 2.983398e-01, 2.552680e-02,
 2.988281e-01, 2.720659e-02,
 2.993164e-01, 2.897772e-02,
 2.998047e-01, 3.084374e-02,
 3.002930e-01, 3.280825e-02,
 3.007812e-01, 3.487489e-02,
 3.012695e-01, 3.704734e-02,
 3.017578e-01, 3.932928e-02,
 3.022461e-01, 4.172443e-02,
 3.027344e-01, 4.423650e-02,
 3.032227e-01, 4.686921e-02,
 3.037109e-01, 4.962628e-02,
 3.041992e-01, 5.251139e-02,
 3.046875e-01, 5.552822e-02,
 3.051758e-01, 5.868039e-02,
 3.056641e-01, 6.197148e-02,
 3.061523e-01, 6.540502e-02,
 3.066406e-01, 6.898448e-02,
 3.071289e-01, 7.271322e-02,
 3.076172e-01, 7.659454e-02,
 3.081055e-01, 8.063162e-02,
 3.085938e-01, 8.482754e-02,
 3.090820e-01, 8.918526e-02,
 3.095703e-01, 9.370757e-02,
 3.100586e-01, 9.839716e-02,
 3.105469e-01, 1.032565e-01,
 3.110352e-01, 1.082880e-01,
 3.115234e-01, 1.134937e-01,
 3.120117e-01, 1.188757e-01,
 3.125000e-01, 1.244356e-01,
 3.129883e-01, 1.301750e-01,
 3.134766e-01, 1.360953e-01,
 3.139648e-01, 1.421974e-01,
 3.144531e-01, 1.484822e-01,
 3.149414e-01, 1.549503e-01,
 3.154297e-01, 1.616020e-01,
 3.159180e-01, 1.684372e-01,
 3.164062e-01, 1.754558e-01,
 3.168945e-01, 1.826572e-01,
 3.173828e-01, 1.900405e-01,
 3.178711e-01, 1.976047e-01,
 3.183594e-01, 2.053482e-01,
 3.188477e-01, 2.132693e-01,
 3.193359e-01, 2.213660e-01,
 3.198242e-01, 2.296357e-01,
 3.203125e-01, 2.380760e-01,
 3.208008e-01, 2.466836e-01,
 3.212891e-01, 2.554553e-01,
 3.217773e-01, 2.643874e-01,
 3.222656e-01, 2.734760e-01,
 3.227539e-01, 2.827168e-01,
 3.232422e-01, 2.921052e-01,
 3.237305e-01, 3.016362e-01,
 3.242188e-01, 3.113049e-01,
 3.247070e-01, 3.211056e-01,
 3.251953e-01, 3.310326e-01,
 3.256836e-01, 3.410800e-01,
 3.261719e-01, 3.512415e-01,
 3.266602e-01, 3.615106e-01,
 3.271484e-01, 3.718805e-01,
 3.276367e-01, 3.823443e-01,
 3.281250e-01, 3.928948e-01,
 3.286133e-01, 4.035247e-01,
 3.291016e-01, 4.142264e-01,
 3.295898e-01, 4.249922e-01,
 3.300781e-01, 4.358143e-01,
 3.305664e-01, 4.466847e-01,
 3.310547e-01, 4.575954e-01,
 3.315430e-01, 4.685382e-01,
 3.320312e-01, 4.795048e-01,
 3.325195e-01, 4.904870e-01,
 3.330078e-01, 5.014764e-01,
 3.334961e-01, 5.124647e-01,
 3.339844e-01, 5.234436e-01,
 3.344727e-01, 5.344047e-01,
 3.349609e-01, 5.453397e-01,
 3.354492e-01, 5.562404e-01,
 3.359375e-01, 5.670987e-01,
 3.364258e-01, 5.779066e-01,
 3.369141e-01, 5.886560e-01,
 3.374023e-01, 5.993393e-01,
 3.378906e-01, 6.099487e-01,
 3.383789e-01, 6.204767e-01,
 3.388672e-01, 6.309161e-01,
 3.393555e-01, 6.412598e-01,
 3.398438e-01, 6.515008e-01,
 3.403320e-01, 6.616324e-01,
 3.408203e-01, 6.716483e-01,
 3.413086e-01, 6.815422e-01,
 3.417969e-01, 6.913082e-01,
 3.422852e-01, 7.009407e-01,
 3.427734e-01, 7.104342e-01,
 3.432617e-01, 7.197836e-01,
 3.437500e-01, 7.289842e-01,
 3.442383e-01, 7.380315e-01,
 3.447266e-01, 7.469212e-01,
 3.452148e-01, 7.556495e-01,
 3.457031e-01, 7.642128e-01,
 3.461914e-01, 7.726079e-01,
 3.466797e-01, 7.808318e-01,
 3.471680e-01, 7.888819e-01,
 3.476562e-01, 7.967558e-01,
 3.481445e-01, 8.044517e-01,
 3.486328e-01, 8.119678e-01,
 3.491211e-01, 8.193028e-01,
 3.496094e-01, 8.264556e-01,
 3.500977e-01, 8.334254e-01,
 3.505859e-01, 8.402117e-01,
 3.510742e-01, 8.468145e-01,
 3.515625e-01, 8.532338e-01,
 3.520508e-01, 8.594699e-01,
 3.525391e-01, 8.655235e-01,
 3.530273e-01, 8.713955e-01,
 3.535156e-01, 8.770870e-01,
 3.540039e-01, 8.825994e-01,
 3.544922e-01, 8.879342e-01,
 3.549805e-01, 8.930934e-01,
 3.554688e-01, 8.980788e-01,
 3.559570e-01, 9.028927e-01,
 3.564453e-01, 9.075375e-01,
 3.569336e-01, 9.120157e-01,
 3.574219e-01, 9.163300e-01,
 3.579102e-01, 9.204834e-01,
 3.583984e-01, 9.244786e-01,
 3.588867e-01, 9.283190e-01,
 3.593750e-01, 9.320076e-01,
 3.598633e-01, 9.355478e-01,
 3.603516e-01, 9.389430e-01,
 3.608398e-01, 9.421967e-01,
 3.613281e-01, 9.453123e-01,
 3.618164e-01, 9.482936e-01,
 3.623047e-01, 9.511442e-01,
 3.627930e-01, 9.538676e-01,
 3.632812e-01, 9.564677e-01,
 3.637695e-01, 9.589481e-01,
 3.642578e-01, 9.613126e-01,
 3.647461e-01, 9.635648e-01,
 3.652344e-01, 9.657085e-01,
 3.657227e-01, 9.677474e-01,
 3.662109e-01, 9.696851e-01,
 3.666992e-01, 9.715252e-01,
 3.671875e-01, 9.732714e-01,
 3.676758e-01, 9.749272e-01,
 3.681641e-01, 9.764960e-01,
 3.686523e-01, 9.779814e-01,
 3.691406e-01, 9.793867e-01,
 3.696289e-01, 9.807153e-01,
 3.701172e-01, 9.819703e-01,
 3.706055e-01, 9.831549e-01,
 3.710938e-01, 9.842723e-01,
 3.715820e-01, 9.853254e-01,
 3.720703e-01, 9.863173e-01,
 3.725586e-01, 9.872507e-01,
 3.730469e-01, 9.881285e-01,
 3.735352e-01, 9.889534e-01,
 3.740234e-01, 9.897279e-01,
 3.745117e-01, 9.904546e-01,
 3.750000e-01, 9.911359e-01,
 3.754883e-01, 9.917742e-01,
 3.759766e-01, 9.923717e-01,
 3.764648e-01, 9.929307e-01,
 3.769531e-01, 9.934531e-01,
 3.774414e-01, 9.939411e-01,
 3.779297e-01, 9.943966e-01,
 3.784180e-01, 9.948214e-01,
 3.789062e-01, 9.952172e-01,
 3.793945e-01, 9.955859e-01,
 3.798828e-01, 9.959289e-01,
 3.803711e-01, 9.962479e-01,
 3.808594e-01, 9.965442e-01,
 3.813477e-01, 9.968193e-01,
 3.818359e-01, 9.970746e-01,
 3.823242e-01, 9.973112e-01,
 3.828125e-01, 9.975304e-01,
 3.833008e-01, 9.977333e-01,
 3.837891e-01, 9.979210e-01,
 3.842773e-01, 9.980944e-01,
 3.847656e-01, 9.982546e-01,
 3.852539e-01, 9.984025e-01,
 3.857422e-01, 9.985388e-01,
 3.862305e-01, 9.986644e-01,
 3.867188e-01, 9.987801e-01,
 3.872070e-01, 9.988865e-01,
 3.876953e-01, 9.989844e-01,
 3.881836e-01, 9.990743e-01,
 3.886719e-01, 9.991568e-01,
 3.891602e-01, 9.992325e-01,
 3.896484e-01, 9.993019e-01,
 3.901367e-01, 9.993655e-01,
 3.906250e-01, 9.994237e-01,
 3.911133e-01, 9.994769e-01,
 3.916016e-01, 9.995255e-01,
 3.920898e-01, 9.995700e-01,
 3.925781e-01, 9.996105e-01,
 3.930664e-01, 9.996474e-01,
 3.935547e-01, 9.996811e-01,
 3.940430e-01, 9.997118e-01,
 3.945312e-01, 9.997397e-01,
 3.950195e-01, 9.997650e-01,
 3.955078e-01, 9.997881e-01,
 3.959961e-01, 9.998090e-01,
 3.964844e-01, 9.998280e-01,
 3.969727e-01, 9.998452e-01,
 3.974609e-01, 9.998607e-01,
 3.979492e-01, 9.998748e-01,
 3.984375e-01, 9.998876e-01,
 3.989258e-01, 9.998991e-01,
 3.994141e-01, 9.999095e-01,
 3.999023e-01, 9.999189e-01,
 4.003906e-01, 9.999274e-01,
 4.008789e-01, 9.999350e-01,
 4.013672e-01, 9.999419e-01,
 4.018555e-01, 9.999480e-01,
 4.023438e-01, 9.999536e-01,
 4.028320e-01, 9.999586e-01,
 4.033203e-01, 9.999631e-01,
 4.038086e-01, 9.999671e-01,
 4.042969e-01, 9.999707e-01,
 4.047852e-01, 9.999739e-01,
 4.052734e-01, 9.999768e-01,
 4.057617e-01, 9.999794e-01,
 4.062500e-01, 9.999817e-01,
 4.067383e-01, 9.999838e-01,
 4.072266e-01, 9.999856e-01,
 4.077148e-01, 9.999872e-01,
 4.082031e-01, 9.999887e-01,
 4.086914e-01, 9.999900e-01,
 4.091797e-01, 9.999912e-01,
 4.096680e-01, 9.999922e-01,
 4.101562e-01, 9.999931e-01,
 4.106445e-01, 9.999939e-01,
 4.111328e-01, 9.999946e-01,
 4.116211e-01, 9.999953e-01,
 4.121094e-01, 9.999958e-01,
 4.125977e-01, 9.999963e-01,
 4.130859e-01, 9.999968e-01,
 4.135742e-01, 9.999972e-01,
 4.140625e-01, 9.999975e-01,
 4.145508e-01, 9.999978e-01,
 4.150391e-01, 9.999981e-01,
 4.155273e-01, 9.999983e-01,
 4.160156e-01, 9.999985e-01,
 4.165039e-01, 9.999987e-01,
 4.169922e-01, 9.999989e-01,
 4.174805e-01, 9.999990e-01,
 4.179688e-01, 9.999991e-01,
 4.184570e-01, 9.999993e-01,
 4.189453e-01, 9.999993e-01,
 4.194336e-01, 9.999994e-01,
 4.199219e-01, 9.999995e-01,
 4.204102e-01, 9.999996e-01,
 4.208984e-01, 9.999996e-01,
 4.213867e-01, 9.999997e-01,
 4.218750e-01, 9.999997e-01,
 4.223633e-01, 9.999998e-01,
 4.228516e-01, 9.999998e-01,
 4.233398e-01, 9.999998e-01,
 4.238281e-01, 9.999998e-01,
 4.243164e-01, 9.999999e-01,
 4.248047e-01, 9.999999e-01,
 4.252930e-01, 9.999999e-01,
 4.257812e-01, 9.999999e-01,
 4.262695e-01, 9.999999e-01,
 4.267578e-01, 9.999999e-01,
 4.272461e-01, 9.999999e-01,
 4.277344e-01, 1.000000e+00,
 4.282227e-01, 1.000000e+00,
 4.287109e-01, 1.000000e+00,
 4.291992e-01, 1.000000e+00,
 4.296875e-01, 1.000000e+00,
 4.301758e-01, 1.000000e+00,
 4.306641e-01, 1.000000e+00,
 4.311523e-01, 1.000000e+00,
 4.316406e-01, 1.000000e+00,
 4.321289e-01, 1.000000e+00,
 4.326172e-01, 1.000000e+00,
 4.331055e-01, 1.000000e+00,
 4.335938e-01, 1.000000e+00,
 4.340820e-01, 1.000000e+00,
 4.345703e-01, 1.000000e+00,
 4.350586e-01, 1.000000e+00,
 4.355469e-01, 1.000000e+00,
 4.360352e-01, 1.000000e+00,
 4.365234e-01, 1.000000e+00,
 4.370117e-01, 1.000000e+00,
 4.375000e-01, 1.000000e+00,
 4.379883e-01, 1.000000e+00,
 4.384766e-01, 1.000000e+00,
 4.389648e-01, 1.000000e+00,
 4.394531e-01, 1.000000e+00,
 4.399414e-01, 1.000000e+00,
 4.404297e-01, 1.000000e+00,
 4.409180e-01, 1.000000e+00,
 4.414062e-01, 1.000000e+00,
 4.418945e-01, 1.000000e+00,
 4.423828e-01, 1.000000e+00,
 4.428711e-01, 1.000000e+00,
 4.433594e-01, 1.000000e+00,
 4.438477e-01, 1.000000e+00,
 4.443359e-01, 1.000000e+00,
 4.448242e-01, 1.000000e+00,
 4.453125e-01, 1.000000e+00,
 4.458008e-01, 1.000000e+00,
 4.462891e-01, 1.000000e+00,
 4.467773e-01, 1.000000e+00,
 4.472656e-01, 1.000000e+00,
 4.477539e-01, 1.000000e+00,
 4.482422e-01, 1.000000e+00,
 4.487305e-01, 1.000000e+00,
 4.492188e-01, 1.000000e+00,
 4.497070e-01, 1.000000e+00,
 4.501953e-01, 1.000000e+00,
 4.506836e-01, 1.000000e+00,
 4.511719e-01, 1.000000e+00,
 4.516602e-01, 1.000000e+00,
 4.521484e-01, 1.000000e+00,
 4.526367e-01, 1.000000e+00,
 4.531250e-01, 1.000000e+00,
 4.536133e-01, 1.000000e+00,
 4.541016e-01, 1.000000e+00,
 4.545898e-01, 1.000000e+00,
 4.550781e-01, 1.000000e+00,
 4.555664e-01, 1.000000e+00,
 4.560547e-01, 1.000000e+00,
 4.565430e-01, 1.000000e+00,
 4.570312e-01, 1.000000e+00,
 4.575195e-01, 1.000000e+00,
 4.580078e-01, 1.000000e+00,
 4.584961e-01, 1.000000e+00,
 4.589844e-01, 1.000000e+00,
 4.594727e-01, 1.000000e+00,
 4.599609e-01, 1.000000e+00,
 4.604492e-01, 1.000000e+00,
 4.609375e-01, 1.000000e+00,
 4.614258e-01, 1.000000e+00,
 4.619141e-01, 1.000000e+00,
 4.624023e-01, 1.000000e+00,
 4.628906e-01, 1.000000e+00,
 4.633789e-01, 1.000000e+00,
 4.638672e-01, 1.000000e+00,
 4.643555e-01, 1.000000e+00,
 4.648438e-01, 1.000000e+00,
 4.653320e-01, 1.000000e+00,
 4.658203e-01, 1.000000e+00,
 4.663086e-01, 1.000000e+00,
 4.667969e-01, 1.000000e+00,
 4.672852e-01, 1.000000e+00,
 4.677734e-01, 1.000000e+00,
 4.682617e-01, 1.000000e+00,
 4.687500e-01, 1.000000e+00,
 4.692383e-01, 1.000000e+00,
 4.697266e-01, 1.000000e+00,
 4.702148e-01, 1.000000e+00,
 4.707031e-01, 1.000000e+00,
 4.711914e-01, 1.000000e+00,
 4.716797e-01, 1.000000e+00,
 4.721680e-01, 1.000000e+00,
 4.726562e-01, 1.000000e+00,
 4.731445e-01, 1.000000e+00,
 4.736328e-01, 1.000000e+00,
 4.741211e-01, 1.000000e+00,
 4.746094e-01, 1.000000e+00,
 4.750977e-01, 1.000000e+00,
 4.755859e-01, 1.000000e+00,
 4.760742e-01, 1.000000e+00,
 4.765625e-01, 1.000000e+00,
 4.770508e-01, 1.000000e+00,
 4.775391e-01, 1.000000e+00,
 4.780273e-01, 1.000000e+00,
 4.785156e-01, 1.000000e+00,
 4.790039e-01, 1.000000e+00,
 4.794922e-01, 1.000000e+00,
 4.799805e-01, 1.000000e+00,
 4.804688e-01, 1.000000e+00,
 4.809570e-01, 1.000000e+00,
 4.814453e-01, 1.000000e+00,
 4.819336e-01, 1.000000e+00,
 4.824219e-01, 1.000000e+00,
 4.829102e-01, 1.000000e+00,
 4.833984e-01, 1.000000e+00,
 4.838867e-01, 1.000000e+00,
 4.843750e-01, 1.000000e+00,
 4.848633e-01, 1.000000e+00,
 4.853516e-01, 1.000000e+00,
 4.858398e-01, 1.000000e+00,
 4.863281e-01, 1.000000e+00,
 4.868164e-01, 1.000000e+00,
 4.873047e-01, 1.000000e+00,
 4.877930e-01, 1.000000e+00,
 4.882812e-01, 1.000000e+00,
 4.887695e-01, 1.000000e+00,
 4.892578e-01, 1.000000e+00,
 4.897461e-01, 1.000000e+00,
 4.902344e-01, 1.000000e+00,
 4.907227e-01, 1.000000e+00,
 4.912109e-01, 1.000000e+00,
 4.916992e-01, 1.000000e+00,
 4.921875e-01, 1.000000e+00,
 4.926758e-01, 1.000000e+00,
 4.931641e-01, 1.000000e+00,
 4.936523e-01, 1.000000e+00,
 4.941406e-01, 1.000000e+00,
 4.946289e-01, 1.000000e+00,
 4.951172e-01, 1.000000e+00,
 4.956055e-01, 1.000000e+00,
 4.960938e-01, 1.000000e+00,
 4.965820e-01, 1.000000e+00,
 4.970703e-01, 1.000000e+00,
 4.975586e-01, 1.000000e+00,
 4.980469e-01, 1.000000e+00,
 4.985352e-01, 1.000000e+00,
 4.990234e-01, 1.000000e+00,
 4.995117e-01, 1.000000e+00,
 5.000000e-01, 1.000000e+00,
 5.004883e-01, 1.000000e+00,
 5.009766e-01, 1.000000e+00,
 5.014648e-01, 1.000000e+00,
 5.019531e-01, 1.000000e+00,
 5.024414e-01, 1.000000e+00,
 5.029297e-01, 1.000000e+00,
 5.034180e-01, 1.000000e+00,
 5.039062e-01, 1.000000e+00,
 5.043945e-01, 1.000000e+00,
 5.048828e-01, 1.000000e+00,
 5.053711e-01, 1.000000e+00,
 5.058594e-01, 1.000000e+00,
 5.063477e-01, 1.000000e+00,
 5.068359e-01, 1.000000e+00,
 5.073242e-01, 1.000000e+00,
 5.078125e-01, 1.000000e+00,
 5.083008e-01, 1.000000e+00,
 5.087891e-01, 1.000000e+00,
 5.092773e-01, 1.000000e+00,
 5.097656e-01, 1.000000e+00,
 5.102539e-01, 1.000000e+00,
 5.107422e-01, 1.000000e+00,
 5.112305e-01, 1.000000e+00,
 5.117188e-01, 1.000000e+00,
 5.122070e-01, 1.000000e+00,
 5.126953e-01, 1.000000e+00,
 5.131836e-01, 1.000000e+00,
 5.136719e-01, 1.000000e+00,
 5.141602e-01, 1.000000e+00,
 5.146484e-01, 1.000000e+00,
 5.151367e-01, 1.000000e+00,
 5.156250e-01, 1.000000e+00,
 5.161133e-01, 1.000000e+00,
 5.166016e-01, 1.000000e+00,
 5.170898e-01, 1.000000e+00,
 5.175781e-01, 1.000000e+00,
 5.180664e-01, 1.000000e+00,
 5.185547e-01, 1.000000e+00,
 5.190430e-01, 1.000000e+00,
 5.195312e-01, 1.000000e+00,
 5.200195e-01, 1.000000e+00,
 5.205078e-01, 1.000000e+00,
 5.209961e-01, 1.000000e+00,
 5.214844e-01, 1.000000e+00,
 5.219727e-01, 1.000000e+00,
 5.224609e-01, 1.000000e+00,
 5.229492e-01, 1.000000e+00,
 5.234375e-01, 1.000000e+00,
 5.239258e-01, 1.000000e+00,
 5.244141e-01, 1.000000e+00,
 5.249023e-01, 1.000000e+00,
 5.253906e-01, 1.000000e+00,
 5.258789e-01, 1.000000e+00,
 5.263672e-01, 1.000000e+00,
 5.268555e-01, 1.000000e+00,
 5.273438e-01, 1.000000e+00,
 5.278320e-01, 1.000000e+00,
 5.283203e-01, 1.000000e+00,
 5.288086e-01, 1.000000e+00,
 5.292969e-01, 1.000000e+00,
 5.297852e-01, 1.000000e+00,
 5.302734e-01, 1.000000e+00,
 5.307617e-01, 1.000000e+00,
 5.312500e-01, 1.000000e+00,
 5.317383e-01, 1.000000e+00,
 5.322266e-01, 1.000000e+00,
 5.327148e-01, 1.000000e+00,
 5.332031e-01, 1.000000e+00,
 5.336914e-01, 1.000000e+00,
 5.341797e-01, 1.000000e+00,
 5.346680e-01, 1.000000e+00,
 5.351562e-01, 1.000000e+00,
 5.356445e-01, 1.000000e+00,
 5.361328e-01, 1.000000e+00,
 5.366211e-01, 1.000000e+00,
 5.371094e-01, 1.000000e+00,
 5.375977e-01, 1.000000e+00,
 5.380859e-01, 1.000000e+00,
 5.385742e-01, 1.000000e+00,
 5.390625e-01, 1.000000e+00,
 5.395508e-01, 1.000000e+00,
 5.400391e-01, 1.000000e+00,
 5.405273e-01, 1.000000e+00,
 5.410156e-01, 1.000000e+00,
 5.415039e-01, 1.000000e+00,
 5.419922e-01, 1.000000e+00,
 5.424805e-01, 1.000000e+00,
 5.429688e-01, 1.000000e+00,
 5.434570e-01, 1.000000e+00,
 5.439453e-01, 1.000000e+00,
 5.444336e-01, 1.000000e+00,
 5.449219e-01, 1.000000e+00,
 5.454102e-01, 1.000000e+00,
 5.458984e-01, 1.000000e+00,
 5.463867e-01, 1.000000e+00,
 5.468750e-01, 1.000000e+00,
 5.473633e-01, 1.000000e+00,
 5.478516e-01, 1.000000e+00,
 5.483398e-01, 1.000000e+00,
 5.488281e-01, 1.000000e+00,
 5.493164e-01, 1.000000e+00,
 5.498047e-01, 1.000000e+00,
 5.502930e-01, 1.000000e+00,
 5.507812e-01, 1.000000e+00,
 5.512695e-01, 1.000000e+00,
 5.517578e-01, 1.000000e+00,
 5.522461e-01, 1.000000e+00,
 5.527344e-01, 1.000000e+00,
 5.532227e-01, 1.000000e+00,
 5.537109e-01, 1.000000e+00,
 5.541992e-01, 1.000000e+00,
 5.546875e-01, 1.000000e+00,
 5.551758e-01, 1.000000e+00,
 5.556641e-01, 1.000000e+00,
 5.561523e-01, 1.000000e+00,
 5.566406e-01, 1.000000e+00,
 5.571289e-01, 1.000000e+00,
 5.576172e-01, 1.000000e+00,
 5.581055e-01, 1.000000e+00,
 5.585938e-01, 1.000000e+00,
 5.590820e-01, 1.000000e+00,
 5.595703e-01, 1.000000e+00,
 5.600586e-01, 1.000000e+00,
 5.605469e-01, 1.000000e+00,
 5.610352e-01, 1.000000e+00,
 5.615234e-01, 1.000000e+00,
 5.620117e-01, 1.000000e+00,
 5.625000e-01, 1.000000e+00,
 5.629883e-01, 1.000000e+00,
 5.634766e-01, 1.000000e+00,
 5.639648e-01, 1.000000e+00,
 5.644531e-01, 1.000000e+00,
 5.649414e-01, 1.000000e+00,
 5.654297e-01, 1.000000e+00,
 5.659180e-01, 1.000000e+00,
 5.664062e-01, 1.000000e+00,
 5.668945e-01, 1.000000e+00,
 5.673828e-01, 1.000000e+00,
 5.678711e-01, 1.000000e+00,
 5.683594e-01, 1.000000e+00,
 5.688477e-01, 1.000000e+00,
 5.693359e-01, 1.000000e+00,
 5.698242e-01, 1.000000e+00,
 5.703125e-01, 1.000000e+00,
 5.708008e-01, 1.000000e+00,
 5.712891e-01, 1.000000e+00,
 5.717773e-01, 1.000000e+00,
 5.722656e-01, 9.999999e-01,
 5.727539e-01, 9.999999e-01,
 5.732422e-01, 9.999999e-01,
 5.737305e-01, 9.999999e-01,
 5.742188e-01, 9.999999e-01,
 5.747070e-01, 9.999999e-01,
 5.751953e-01, 9.999999e-01,
 5.756836e-01, 9.999998e-01,
 5.761719e-01, 9.999998e-01,
 5.766602e-01, 9.999998e-01,
 5.771484e-01, 9.999998e-01,
 5.776367e-01, 9.999997e-01,
 5.781250e-01, 9.999997e-01,
 5.786133e-01, 9.999996e-01,
 5.791016e-01, 9.999996e-01,
 5.795898e-01, 9.999995e-01,
 5.800781e-01, 9.999994e-01,
 5.805664e-01, 9.999993e-01,
 5.810547e-01, 9.999992e-01,
 5.815430e-01, 9.999991e-01,
 5.820312e-01, 9.999990e-01,
 5.825195e-01, 9.999989e-01,
 5.830078e-01, 9.999987e-01,
 5.834961e-01, 9.999985e-01,
 5.839844e-01, 9.999983e-01,
 5.844727e-01, 9.999980e-01,
 5.849609e-01, 9.999978e-01,
 5.854492e-01, 9.999975e-01,
 5.859375e-01, 9.999971e-01,
 5.864258e-01, 9.999967e-01,
 5.869141e-01, 9.999962e-01,
 5.874023e-01, 9.999957e-01,
 5.878906e-01, 9.999951e-01,
 5.883789e-01, 9.999945e-01,
 5.888672e-01, 9.999937e-01,
 5.893555e-01, 9.999929e-01,
 5.898438e-01, 9.999920e-01,
 5.903320e-01, 9.999909e-01,
 5.908203e-01, 9.999897e-01,
 5.913086e-01, 9.999884e-01,
 5.917969e-01, 9.999869e-01,
 5.922852e-01, 9.999852e-01,
 5.927734e-01, 9.999833e-01,
 5.932617e-01, 9.999811e-01,
 5.937500e-01, 9.999788e-01,
 5.942383e-01, 9.999761e-01,
 5.947266e-01, 9.999731e-01,
 5.952148e-01, 9.999698e-01,
 5.957031e-01, 9.999661e-01,
 5.961914e-01, 9.999619e-01,
 5.966797e-01, 9.999573e-01,
 5.971680e-01, 9.999521e-01,
 5.976562e-01, 9.999464e-01,
 5.981445e-01, 9.999400e-01,
 5.986328e-01, 9.999329e-01,
 5.991211e-01, 9.999250e-01,
 5.996094e-01, 9.999163e-01,
 6.000977e-01, 9.999066e-01,
 6.005859e-01, 9.998958e-01,
 6.010742e-01, 9.998839e-01,
 6.015625e-01, 9.998707e-01,
 6.020508e-01, 9.998561e-01,
 6.025391e-01, 9.998400e-01,
 6.030273e-01, 9.998222e-01,
 6.035156e-01, 9.998026e-01,
 6.040039e-01, 9.997810e-01,
 6.044922e-01, 9.997572e-01,
 6.049805e-01, 9.997310e-01,
 6.054688e-01, 9.997021e-01,
 6.059570e-01, 9.996704e-01,
 6.064453e-01, 9.996356e-01,
 6.069336e-01, 9.995974e-01,
 6.074219e-01, 9.995555e-01,
 6.079102e-01, 9.995096e-01,
 6.083984e-01, 9.994593e-01,
 6.088867e-01, 9.994043e-01,
 6.093750e-01, 9.993442e-01,
 6.098633e-01, 9.992785e-01,
 6.103516e-01, 9.992068e-01,
 6.108398e-01, 9.991286e-01,
 6.113281e-01, 9.990434e-01,
 6.118164e-01, 9.989505e-01,
 6.123047e-01, 9.988494e-01,
 6.127930e-01, 9.987395e-01,
 6.132812e-01, 9.986201e-01,
 6.137695e-01, 9.984904e-01,
 6.142578e-01, 9.983497e-01,
 6.147461e-01, 9.981971e-01,
 6.152344e-01, 9.980318e-01,
 6.157227e-01, 9.978529e-01,
 6.162109e-01, 9.976593e-01,
 6.166992e-01, 9.974500e-01,
 6.171875e-01, 9.972240e-01,
 6.176758e-01, 9.969800e-01,
 6.181641e-01, 9.967169e-01,
 6.186523e-01, 9.964333e-01,
 6.191406e-01, 9.961280e-01,
 6.196289e-01, 9.957994e-01,
 6.201172e-01, 9.954460e-01,
 6.206055e-01, 9.950664e-01,
 6.210938e-01, 9.946588e-01,
 6.215820e-01, 9.942216e-01,
 6.220703e-01, 9.937528e-01,
 6.225586e-01, 9.932507e-01,
 6.230469e-01, 9.927132e-01,
 6.235352e-01, 9.921384e-01,
 6.240234e-01, 9.915240e-01,
 6.245117e-01, 9.908679e-01,
 6.250000e-01, 9.901677e-01,
 6.254883e-01, 9.894210e-01,
 6.259766e-01, 9.886255e-01,
 6.264648e-01, 9.877784e-01,
 6.269531e-01, 9.868772e-01,
 6.274414e-01, 9.859191e-01,
 6.279297e-01, 9.849013e-01,
 6.284180e-01, 9.838209e-01,
 6.289062e-01, 9.826749e-01,
 6.293945e-01, 9.814603e-01,
 6.298828e-01, 9.801739e-01,
 6.303711e-01, 9.788125e-01,
 6.308594e-01, 9.773728e-01,
 6.313477e-01, 9.758515e-01,
 6.318359e-01, 9.742452e-01,
 6.323242e-01, 9.725504e-01,
 6.328125e-01, 9.707636e-01,
 6.333008e-01, 9.688812e-01,
 6.337891e-01, 9.668996e-01,
 6.342773e-01, 9.648151e-01,
 6.347656e-01, 9.626241e-01,
 6.352539e-01, 9.603229e-01,
 6.357422e-01, 9.579078e-01,
 6.362305e-01, 9.553750e-01,
 6.367188e-01, 9.527208e-01,
 6.372070e-01, 9.499415e-01,
 6.376953e-01, 9.470335e-01,
 6.381836e-01, 9.439931e-01,
 6.386719e-01, 9.408166e-01,
 6.391602e-01, 9.375004e-01,
 6.396484e-01, 9.340412e-01,
 6.401367e-01, 9.304353e-01,
 6.406250e-01, 9.266795e-01,
 6.411133e-01, 9.227705e-01,
 6.416016e-01, 9.187051e-01,
 6.420898e-01, 9.144802e-01,
 6.425781e-01, 9.100931e-01,
 6.430664e-01, 9.055407e-01,
 6.435547e-01, 9.008206e-01,
 6.440430e-01, 8.959303e-01,
 6.445312e-01, 8.908674e-01,
 6.450195e-01, 8.856298e-01,
 6.455078e-01, 8.802157e-01,
 6.459961e-01, 8.746232e-01,
 6.464844e-01, 8.688510e-01,
 6.469727e-01, 8.628978e-01,
 6.474609e-01, 8.567624e-01,
 6.479492e-01, 8.504443e-01,
 6.484375e-01, 8.439428e-01,
 6.489258e-01, 8.372577e-01,
 6.494141e-01, 8.303890e-01,
 6.499023e-01, 8.233371e-01,
 6.503906e-01, 8.161026e-01,
 6.508789e-01, 8.086862e-01,
 6.513672e-01, 8.010894e-01,
 6.518555e-01, 7.933134e-01,
 6.523438e-01, 7.853603e-01,
 6.528320e-01, 7.772321e-01,
 6.533203e-01, 7.689312e-01,
 6.538086e-01, 7.604604e-01,
 6.542969e-01, 7.518228e-01,
 6.547852e-01, 7.430218e-01,
 6.552734e-01, 7.340611e-01,
 6.557617e-01, 7.249447e-01,
 6.562500e-01, 7.156770e-01,
 6.567383e-01, 7.062626e-01,
 6.572266e-01, 6.967063e-01,
 6.577148e-01, 6.870136e-01,
 6.582031e-01, 6.771898e-01,
 6.586914e-01, 6.672407e-01,
 6.591797e-01, 6.571725e-01,
 6.596680e-01, 6.469913e-01,
 6.601562e-01, 6.367037e-01,
 6.606445e-01, 6.263166e-01,
 6.611328e-01, 6.158368e-01,
 6.616211e-01, 6.052717e-01,
 6.621094e-01, 5.946285e-01,
 6.625977e-01, 5.839149e-01,
 6.630859e-01, 5.731386e-01,
 6.635742e-01, 5.623073e-01,
 6.640625e-01, 5.514292e-01,
 6.645508e-01, 5.405122e-01,
 6.650391e-01, 5.295646e-01,
 6.655273e-01, 5.185946e-01,
 6.660156e-01, 5.076105e-01,
 6.665039e-01, 4.966206e-01,
 6.669922e-01, 4.856333e-01,
 6.674805e-01, 4.746569e-01,
 6.679688e-01, 4.636997e-01,
 6.684570e-01, 4.527700e-01,
 6.689453e-01, 4.418759e-01,
 6.694336e-01, 4.310256e-01,
 6.699219e-01, 4.202272e-01,
 6.704102e-01, 4.094885e-01,
 6.708984e-01, 3.988173e-01,
 6.713867e-01, 3.882212e-01,
 6.718750e-01, 3.777077e-01,
 6.723633e-01, 3.672840e-01,
 6.728516e-01, 3.569573e-01,
 6.733398e-01, 3.467343e-01,
 6.738281e-01, 3.366218e-01,
 6.743164e-01, 3.266261e-01,
 6.748047e-01, 3.167533e-01,
 6.752930e-01, 3.070094e-01,
 6.757812e-01, 2.974000e-01,
 6.762695e-01, 2.879303e-01,
 6.767578e-01, 2.786055e-01,
 6.772461e-01, 2.694303e-01,
 6.777344e-01, 2.604091e-01,
 6.782227e-01, 2.515461e-01,
 6.787109e-01, 2.428451e-01,
 6.791992e-01, 2.343097e-01,
 6.796875e-01, 2.259430e-01,
 6.801758e-01, 2.177479e-01,
 6.806641e-01, 2.097270e-01,
 6.811523e-01, 2.018826e-01,
 6.816406e-01, 1.942166e-01,
 6.821289e-01, 1.867305e-01,
 6.826172e-01, 1.794258e-01,
 6.831055e-01, 1.723034e-01,
 6.835938e-01, 1.653641e-01,
 6.840820e-01, 1.586082e-01,
 6.845703e-01, 1.520360e-01,
 6.850586e-01, 1.456473e-01,
 6.855469e-01, 1.394416e-01,
 6.860352e-01, 1.334183e-01,
 6.865234e-01, 1.275764e-01,
 6.870117e-01, 1.219149e-01,
 6.875000e-01, 1.164323e-01,
 6.879883e-01, 1.111269e-01,
 6.884766e-01, 1.059969e-01,
 6.889648e-01, 1.010403e-01,
 6.894531e-01, 9.625490e-02,
 6.899414e-01, 9.163823e-02,
 6.904297e-01, 8.718773e-02,
 6.909180e-01, 8.290068e-02,
 6.914062e-01, 7.877421e-02,
 6.918945e-01, 7.480531e-02,
 6.923828e-01, 7.099086e-02,
 6.928711e-01, 6.732763e-02,
 6.933594e-01, 6.381229e-02,
 6.938477e-01, 6.044142e-02,
 6.943359e-01, 5.721154e-02,
 6.948242e-01, 5.411911e-02,
 6.953125e-01, 5.116050e-02,
 6.958008e-01, 4.833209e-02,
 6.962891e-01, 4.563018e-02,
 6.967773e-01, 4.305108e-02,
 6.972656e-01, 4.059106e-02,
 6.977539e-01, 3.824642e-02,
 6.982422e-01, 3.601343e-02,
 6.987305e-01, 3.388839e-02,
 6.992188e-01, 3.186760e-02,
 6.997070e-01, 2.994742e-02,
 7.001953e-01, 2.812422e-02,
 7.006836e-01, 2.639440e-02,
 7.011719e-01, 2.475444e-02,
 7.016602e-01, 2.320083e-02,
 7.021484e-01, 2.173015e-02,
 7.026367e-01, 2.033903e-02,
 7.031250e-01, 1.902416e-02,
 7.036133e-01, 1.778230e-02,
 7.041016e-01, 1.661028e-02,
 7.045898e-01, 1.550502e-02,
 7.050781e-01, 1.446351e-02,
 7.055664e-01, 1.348280e-02,
 7.060547e-01, 1.256005e-02,
 7.065430e-01, 1.169249e-02,
 7.070312e-01, 1.087744e-02,
 7.075195e-01, 1.011230e-02,
 7.080078e-01, 9.394550e-03,
 7.084961e-01, 8.721776e-03,
 7.089844e-01, 8.091632e-03,
 7.094727e-01, 7.501864e-03,
 7.099609e-01, 6.950303e-03,
 7.104492e-01, 6.434864e-03,
 7.109375e-01, 5.953547e-03,
 7.114258e-01, 5.504432e-03,
 7.119141e-01, 5.085682e-03,
 7.124023e-01, 4.695540e-03,
 7.128906e-01, 4.332327e-03,
 7.133789e-01, 3.994439e-03,
 7.138672e-01, 3.680349e-03,
 7.143555e-01, 3.388601e-03,
 7.148438e-01, 3.117811e-03,
 7.153320e-01, 2.866665e-03,
 7.158203e-01, 2.633912e-03,
 7.163086e-01, 2.418370e-03,
 7.167969e-01, 2.218916e-03,
 7.172852e-01, 2.034489e-03,
 7.177734e-01, 1.864086e-03,
 7.182617e-01, 1.706760e-03,
 7.187500e-01, 1.561618e-03,
 7.192383e-01, 1.427816e-03,
 7.197266e-01, 1.304562e-03,
 7.202148e-01, 1.191110e-03,
 7.207031e-01, 1.086760e-03,
 7.211914e-01, 9.908539e-04,
 7.216797e-01, 9.027752e-04,
 7.221680e-01, 8.219462e-04,
 7.226562e-01, 7.478263e-04,
 7.231445e-01, 6.799098e-04,
 7.236328e-01, 6.177246e-04,
 7.241211e-01, 5.608301e-04,
 7.246094e-01, 5.088155e-04,
 7.250977e-01, 4.612981e-04,
 7.255859e-01, 4.179219e-04,
 7.260742e-01, 3.783559e-04,
 7.265625e-01, 3.422927e-04,
 7.270508e-01, 3.094469e-04,
 7.275391e-01, 2.795542e-04,
 7.280273e-01, 2.523695e-04,
 7.285156e-01, 2.276662e-04,
 7.290039e-01, 2.052347e-04,
 7.294922e-01, 1.848815e-04,
 7.299805e-01, 1.664280e-04,
 7.304688e-01, 1.497095e-04,
 7.309570e-01, 1.345743e-04,
 7.314453e-01, 1.208828e-04,
 7.319336e-01, 1.085066e-04,
 7.324219e-01, 9.732785e-05,
 7.329102e-01, 8.723829e-05,
 7.333984e-01, 7.813867e-05,
 7.338867e-01, 6.993806e-05,
 7.343750e-01, 6.255322e-05,
 7.348633e-01, 5.590802e-05,
 7.353516e-01, 4.993290e-05,
 7.358398e-01, 4.456434e-05,
 7.363281e-01, 3.974442e-05,
 7.368164e-01, 3.542034e-05,
 7.373047e-01, 3.154402e-05,
 7.377930e-01, 2.807172e-05,
 7.382812e-01, 2.496369e-05,
 7.387695e-01, 2.218381e-05,
 7.392578e-01, 1.969932e-05,
 7.397461e-01, 1.748051e-05,
 7.402344e-01, 1.550047e-05,
 7.407227e-01, 1.373485e-05,
 7.412109e-01, 1.216162e-05,
 7.416992e-01, 1.076087e-05,
 7.421875e-01, 9.514642e-06,
 7.426758e-01, 8.406732e-06,
 7.431641e-01, 7.422533e-06,
 7.436523e-01, 6.548895e-06,
 7.441406e-01, 5.773987e-06,
 7.446289e-01, 5.087172e-06,
 7.451172e-01, 4.478896e-06,
 7.456055e-01, 3.940587e-06,
 7.460938e-01, 3.464559e-06,
 7.465820e-01, 3.043922e-06,
 7.470703e-01, 2.672514e-06,
 7.475586e-01, 2.344820e-06,
 7.480469e-01, 2.055913e-06,
 7.485352e-01, 1.801394e-06,
 7.490234e-01, 1.577337e-06,
 7.495117e-01, 1.380245e-06,
 7.500000e-01, 1.207000e-06,
 7.504883e-01, 1.054831e-06,
 7.509766e-01, 9.212709e-07,
 7.514648e-01, 8.041304e-07,
 7.519531e-01, 7.014652e-07,
 7.524414e-01, 6.115510e-07,
 7.529297e-01, 5.328599e-07,
 7.534180e-01, 4.640393e-07,
 7.539062e-01, 4.038927e-07,
 7.543945e-01, 3.513623e-07,
 7.548828e-01, 3.055141e-07,
 7.553711e-01, 2.655241e-07,
 7.558594e-01, 2.306657e-07,
 7.563477e-01, 2.002991e-07,
 7.568359e-01, 1.738612e-07,
 7.573242e-01, 1.508567e-07,
 7.578125e-01, 1.308508e-07,
 7.583008e-01, 1.134617e-07,
 7.587891e-01, 9.835451e-08,
 7.592773e-01, 8.523543e-08,
 7.597656e-01, 7.384751e-08,
 7.602539e-01, 6.396611e-08,
 7.607422e-01, 5.539516e-08,
 7.612305e-01, 4.796273e-08,
 7.617188e-01, 4.151924e-08,
 7.622070e-01, 3.593468e-08,
 7.626953e-01, 3.109551e-08,
 7.631836e-01, 2.690231e-08,
 7.636719e-01, 2.326916e-08,
 7.641602e-01, 2.012150e-08,
 7.646484e-01, 1.739468e-08,
 7.651367e-01, 1.503215e-08,
 7.656250e-01, 1.298516e-08,
 7.661133e-01, 1.121177e-08,
 7.666016e-01, 9.675500e-09,
 7.670898e-01, 8.344113e-09,
 7.675781e-01, 7.190266e-09,
 7.680664e-01, 6.190324e-09,
 7.685547e-01, 5.324073e-09,
 7.690430e-01, 4.573491e-09,
 7.695312e-01, 3.923303e-09,
 7.700195e-01, 3.360498e-09,
 7.705078e-01, 2.873759e-09,
 7.709961e-01, 2.452856e-09,
 7.714844e-01, 2.089292e-09,
 7.719727e-01, 1.775721e-09,
 7.724609e-01, 1.505808e-09,
 7.729492e-01, 1.273865e-09,
 7.734375e-01, 1.075079e-09,
 7.739258e-01, 9.053984e-10,
 7.744141e-01, 7.611960e-10,
 7.749023e-01, 6.391565e-10,
 7.753906e-01, 5.365329e-10,
 7.758789e-01, 4.509002e-10,
 7.763672e-01, 3.801726e-10,
 7.768555e-01, 3.224057e-10,
 7.773438e-01, 2.759477e-10,
 7.778320e-01, 2.393676e-10,
 7.783203e-01, 2.113798e-10,
 7.788086e-01, 1.908230e-10,
 7.792969e-01, 1.766946e-10,
 7.797852e-01, 1.680842e-10,
 7.802734e-01, 1.641769e-10,
 7.807617e-01, 1.642553e-10,
 7.812500e-01, 1.676750e-10,
 7.817383e-01, 1.738485e-10,
 7.822266e-01, 1.822724e-10,
 7.827148e-01, 1.925412e-10,
 7.832031e-01, 2.042589e-10,
 7.836914e-01, 2.170638e-10,
 7.841797e-01, 2.306167e-10,
 7.846680e-01, 2.446730e-10,
 7.851562e-01, 2.589873e-10,
 7.856445e-01, 2.733204e-10,
 7.861328e-01, 2.874761e-10,
 7.866211e-01, 3.013421e-10,
 7.871094e-01, 3.147786e-10,
 7.875977e-01, 3.276619e-10,
 7.880859e-01, 3.398844e-10,
 7.885742e-01, 3.513887e-10,
 7.890625e-01, 3.621118e-10,
 7.895508e-01, 3.719884e-10,
 7.900391e-01, 3.809781e-10,
 7.905273e-01, 3.890896e-10,
 7.910156e-01, 3.963076e-10,
 7.915039e-01, 4.026293e-10,
 7.919922e-01, 4.080519e-10,
 7.924805e-01, 4.126034e-10,
 7.929688e-01, 4.163035e-10,
 7.934570e-01, 4.191718e-10,
 7.939453e-01, 4.212372e-10,
 7.944336e-01, 4.225378e-10,
 7.949219e-01, 4.231075e-10,
 7.954102e-01, 4.229877e-10,
 7.958984e-01, 4.222222e-10,
 7.963867e-01, 4.208527e-10,
 7.968750e-01, 4.189224e-10,
 7.973633e-01, 4.164824e-10,
 7.978516e-01, 4.135735e-10,
 7.983398e-01, 4.102233e-10,
 7.988281e-01, 4.064709e-10,
 7.993164e-01, 4.023604e-10,
 7.998047e-01, 3.979409e-10,
 8.002930e-01, 3.932370e-10,
 8.007812e-01, 3.882853e-10,
 8.012695e-01, 3.831328e-10,
 8.017578e-01, 3.778168e-10,
 8.022461e-01, 3.723455e-10,
 8.027344e-01, 3.667486e-10,
 8.032227e-01, 3.610600e-10,
 8.037109e-01, 3.553133e-10,
 8.041992e-01, 3.495206e-10,
 8.046875e-01, 3.437046e-10,
 8.051758e-01, 3.379050e-10,
 8.056641e-01, 3.321395e-10,
 8.061523e-01, 3.263985e-10,
 8.066406e-01, 3.206965e-10,
 8.071289e-01, 3.150507e-10,
 8.076172e-01, 3.094852e-10,
 8.081055e-01, 3.039906e-10,
 8.085938e-01, 2.985755e-10,
 8.090820e-01, 2.932658e-10,
 8.095703e-01, 2.880677e-10,
 8.100586e-01, 2.829627e-10,
 8.105469e-01, 2.779553e-10,
 8.110352e-01, 2.730552e-10,
 8.115234e-01, 2.682714e-10,
 8.120117e-01, 2.635941e-10,
 8.125000e-01, 2.590260e-10,
 8.129883e-01, 2.545806e-10,
 8.134766e-01, 2.502606e-10,
 8.139648e-01, 2.460411e-10,
 8.144531e-01, 2.419218e-10,
 8.149414e-01, 2.379046e-10,
 8.154297e-01, 2.339986e-10,
 8.159180e-01, 2.301867e-10,
 8.164062e-01, 2.264674e-10,
 8.168945e-01, 2.228495e-10,
 8.173828e-01, 2.193351e-10,
 8.178711e-01, 2.159026e-10,
 8.183594e-01, 2.125509e-10,
 8.188477e-01, 2.092825e-10,
 8.193359e-01, 2.060999e-10,
 8.198242e-01, 2.029916e-10,
 8.203125e-01, 1.999558e-10,
 8.208008e-01, 1.969995e-10,
 8.212891e-01, 1.941227e-10,
 8.217773e-01, 1.913052e-10,
 8.222656e-01, 1.885459e-10,
 8.227539e-01, 1.858453e-10,
 8.232422e-01, 1.832088e-10,
 8.237305e-01, 1.806221e-10,
 8.242188e-01, 1.780831e-10,
 8.247070e-01, 1.756014e-10,
 8.251953e-01, 1.731757e-10,
 8.256836e-01, 1.707905e-10,
 8.261719e-01, 1.684450e-10,
 8.266602e-01, 1.661416e-10,
 8.271484e-01, 1.638827e-10,
 8.276367e-01, 1.616598e-10,
 8.281250e-01, 1.594727e-10,
 8.286133e-01, 1.573286e-10,
 8.291016e-01, 1.552282e-10,
 8.295898e-01, 1.531560e-10,
 8.300781e-01, 1.511119e-10,
 8.305664e-01, 1.490977e-10,
 8.310547e-01, 1.471193e-10,
 8.315430e-01, 1.451669e-10,
 8.320312e-01, 1.432402e-10,
 8.325195e-01, 1.413460e-10,
 8.330078e-01, 1.394865e-10,
 8.334961e-01, 1.376486e-10,
 8.339844e-01, 1.358323e-10,
 8.344727e-01, 1.340405e-10,
 8.349609e-01, 1.322760e-10,
 8.354492e-01, 1.305327e-10,
 8.359375e-01, 1.288108e-10,
 8.364258e-01, 1.271191e-10,
 8.369141e-01, 1.254574e-10,
 8.374023e-01, 1.238143e-10,
 8.378906e-01, 1.221899e-10,
 8.383789e-01, 1.205864e-10,
 8.388672e-01, 1.190089e-10,
 8.393555e-01, 1.174488e-10,
 8.398438e-01, 1.159061e-10,
 8.403320e-01, 1.143890e-10,
 8.408203e-01, 1.128974e-10,
 8.413086e-01, 1.114208e-10,
 8.417969e-01, 1.099596e-10,
 8.422852e-01, 1.085170e-10,
 8.427734e-01, 1.070956e-10,
 8.432617e-01, 1.056904e-10,
 8.437500e-01, 1.043018e-10,
 8.442383e-01, 1.029381e-10,
 8.447266e-01, 1.015987e-10,
 8.452148e-01, 1.002735e-10,
 8.457031e-01, 9.896259e-11,
 8.461914e-01, 9.766848e-11,
 8.466797e-01, 9.639631e-11,
 8.471680e-01, 9.513913e-11,
 8.476562e-01, 9.389726e-11,
 8.481445e-01, 9.267658e-11,
 8.486328e-01, 9.147919e-11,
 8.491211e-01, 9.029554e-11,
 8.496094e-01, 8.912636e-11,
 8.500977e-01, 8.797460e-11,
 8.505859e-01, 8.684268e-11,
 8.510742e-01, 8.572621e-11,
 8.515625e-01, 8.462542e-11,
 8.520508e-01, 8.354573e-11,
 8.525391e-01, 8.248831e-11,
 8.530273e-01, 8.144352e-11,
 8.535156e-01, 8.041210e-11,
 8.540039e-01, 7.939589e-11,
 8.544922e-01, 7.839885e-11,
 8.549805e-01, 7.741409e-11,
 8.554688e-01, 7.644133e-11,
 8.559570e-01, 7.548710e-11,
 8.564453e-01, 7.455140e-11,
 8.569336e-01, 7.362629e-11,
 8.574219e-01, 7.271205e-11,
 8.579102e-01, 7.181125e-11,
 8.583984e-01, 7.092568e-11,
 8.588867e-01, 7.005117e-11,
 8.593750e-01, 6.918786e-11,
 8.598633e-01, 6.834202e-11,
 8.603516e-01, 6.751323e-11,
 8.608398e-01, 6.669352e-11,
 8.613281e-01, 6.588313e-11,
 8.618164e-01, 6.508387e-11,
 8.623047e-01, 6.429954e-11,
 8.627930e-01, 6.352443e-11,
 8.632812e-01, 6.275860e-11,
 8.637695e-01, 6.200642e-11,
 8.642578e-01, 6.126936e-11,
 8.647461e-01, 6.053981e-11,
 8.652344e-01, 5.981830e-11,
 8.657227e-01, 5.910697e-11,
 8.662109e-01, 5.840763e-11,
 8.666992e-01, 5.771676e-11,
 8.671875e-01, 5.703451e-11,
 8.676758e-01, 5.636637e-11,
 8.681641e-01, 5.571214e-11,
 8.686523e-01, 5.506498e-11,
 8.691406e-01, 5.442521e-11,
 8.696289e-01, 5.379425e-11,
 8.701172e-01, 5.317526e-11,
 8.706055e-01, 5.256298e-11,
 8.710938e-01, 5.195750e-11,
 8.715820e-01, 5.136390e-11,
 8.720703e-01, 5.078216e-11,
 8.725586e-01, 5.020607e-11,
 8.730469e-01, 4.963599e-11,
 8.735352e-01, 4.907389e-11,
 8.740234e-01, 4.852120e-11,
 8.745117e-01, 4.797473e-11,
 8.750000e-01, 4.743462e-11,
 8.754883e-01, 4.690546e-11,
 8.759766e-01, 4.638675e-11,
 8.764648e-01, 4.587231e-11,
 8.769531e-01, 4.536222e-11,
 8.774414e-01, 4.485776e-11,
 8.779297e-01, 4.436179e-11,
 8.784180e-01, 4.387011e-11,
 8.789062e-01, 4.338293e-11,
 8.793945e-01, 4.290365e-11,
 8.798828e-01, 4.243348e-11,
 8.803711e-01, 4.196694e-11,
 8.808594e-01, 4.150456e-11,
 8.813477e-01, 4.104801e-11,
 8.818359e-01, 4.059866e-11,
 8.823242e-01, 4.015394e-11,
 8.828125e-01, 3.971406e-11,
 8.833008e-01, 3.928202e-11,
 8.837891e-01, 3.885841e-11,
 8.842773e-01, 3.843783e-11,
 8.847656e-01, 3.802078e-11,
 8.852539e-01, 3.760834e-11,
 8.857422e-01, 3.720279e-11,
 8.862305e-01, 3.680042e-11,
 8.867188e-01, 3.640133e-11,
 8.872070e-01, 3.600925e-11,
 8.876953e-01, 3.562428e-11,
 8.881836e-01, 3.524217e-11,
 8.886719e-01, 3.486315e-11,
 8.891602e-01, 3.448858e-11,
 8.896484e-01, 3.411935e-11,
 8.901367e-01, 3.375330e-11,
 8.906250e-01, 3.339072e-11,
 8.911133e-01, 3.303433e-11,
 8.916016e-01, 3.268449e-11,
 8.920898e-01, 3.233664e-11,
 8.925781e-01, 3.199107e-11,
 8.930664e-01, 3.164884e-11,
 8.935547e-01, 3.131196e-11,
 8.940430e-01, 3.097763e-11,
 8.945312e-01, 3.064606e-11,
 8.950195e-01, 3.031976e-11,
 8.955078e-01, 2.999944e-11,
 8.959961e-01, 2.968116e-11,
 8.964844e-01, 2.936503e-11,
 8.969727e-01, 2.905218e-11,
 8.974609e-01, 2.874339e-11,
 8.979492e-01, 2.843700e-11,
 8.984375e-01, 2.813316e-11,
 8.989258e-01, 2.783486e-11,
 8.994141e-01, 2.754200e-11,
 8.999023e-01, 2.725121e-11,
 9.003906e-01, 2.696261e-11,
 9.008789e-01, 2.667718e-11,
 9.013672e-01, 2.639635e-11,
 9.018555e-01, 2.611773e-11,
 9.023438e-01, 2.584135e-11,
 9.028320e-01, 2.556987e-11,
 9.033203e-01, 2.530310e-11,
 9.038086e-01, 2.503798e-11,
 9.042969e-01, 2.477440e-11,
 9.047852e-01, 2.451343e-11,
 9.052734e-01, 2.425560e-11,
 9.057617e-01, 2.399959e-11,
 9.062500e-01, 2.374562e-11,
 9.067383e-01, 2.349582e-11,
 9.072266e-01, 2.325038e-11,
 9.077148e-01, 2.300605e-11,
 9.082031e-01, 2.276297e-11,
 9.086914e-01, 2.252213e-11,
 9.091797e-01, 2.228487e-11,
 9.096680e-01, 2.204920e-11,
 9.101562e-01, 2.181512e-11,
 9.106445e-01, 2.158455e-11,
 9.111328e-01, 2.135789e-11,
 9.116211e-01, 2.113225e-11,
 9.121094e-01, 2.090771e-11,
 9.125977e-01, 2.068539e-11,
 9.130859e-01, 2.046586e-11,
 9.135742e-01, 2.024797e-11,
 9.140625e-01, 2.003177e-11,
 9.145508e-01, 1.981926e-11,
 9.150391e-01, 1.961067e-11,
 9.155273e-01, 1.940313e-11,
 9.160156e-01, 1.919687e-11,
 9.165039e-01, 1.899281e-11,
 9.169922e-01, 1.879195e-11,
 9.174805e-01, 1.859225e-11,
 9.179688e-01, 1.839355e-11,
 9.184570e-01, 1.819809e-11,
 9.189453e-01, 1.800573e-11,
 9.194336e-01, 1.781411e-11,
 9.199219e-01, 1.762328e-11,
 9.204102e-01, 1.743436e-11,
 9.208984e-01, 1.724781e-11,
 9.213867e-01, 1.706252e-11,
 9.218750e-01, 1.687856e-11,
 9.223633e-01, 1.669822e-11,
 9.228516e-01, 1.652133e-11,
 9.233398e-01, 1.634545e-11,
 9.238281e-01, 1.617070e-11,
 9.243164e-01, 1.599791e-11,
 9.248047e-01, 1.582811e-11,
 9.252930e-01, 1.565946e-11,
 9.257812e-01, 1.549188e-11,
 9.262695e-01, 1.532687e-11,
 9.267578e-01, 1.516474e-11,
 9.272461e-01, 1.500305e-11,
 9.277344e-01, 1.484192e-11,
 9.282227e-01, 1.468230e-11,
 9.287109e-01, 1.452466e-11,
 9.291992e-01, 1.436791e-11,
 9.296875e-01, 1.421206e-11,
 9.301758e-01, 1.405913e-11,
 9.306641e-01, 1.390896e-11,
 9.311523e-01, 1.375930e-11,
 9.316406e-01, 1.361030e-11,
 9.321289e-01, 1.346265e-11,
 9.326172e-01, 1.331727e-11,
 9.331055e-01, 1.317231e-11,
 9.335938e-01, 1.302774e-11,
 9.340820e-01, 1.288550e-11,
 9.345703e-01, 1.274549e-11,
 9.350586e-01, 1.260563e-11,
 9.355469e-01, 1.246621e-11,
 9.360352e-01, 1.232818e-11,
 9.365234e-01, 1.219205e-11,
 9.370117e-01, 1.205668e-11,
 9.375000e-01, 1.192215e-11,
 9.379883e-01, 1.179017e-11,
 9.384766e-01, 1.166056e-11,
 9.389648e-01, 1.153116e-11,
 9.394531e-01, 1.140212e-11,
 9.399414e-01, 1.127399e-11,
 9.404297e-01, 1.114770e-11,
 9.409180e-01, 1.102171e-11,
 9.414062e-01, 1.089614e-11,
 9.418945e-01, 1.077229e-11,
 9.423828e-01, 1.065065e-11,
 9.428711e-01, 1.052930e-11,
 9.433594e-01, 1.040868e-11,
 9.438477e-01, 1.028949e-11,
 9.443359e-01, 1.017230e-11,
 9.448242e-01, 1.005608e-11,
 9.453125e-01, 9.940976e-12,
 9.458008e-01, 9.828053e-12,
 9.462891e-01, 9.717544e-12,
 9.467773e-01, 9.607437e-12,
 9.472656e-01, 9.498051e-12,
 9.477539e-01, 9.389712e-12,
 9.482422e-01, 9.283277e-12,
 9.487305e-01, 9.177240e-12,
 9.492188e-01, 9.071739e-12,
 9.497070e-01, 8.968113e-12,
 9.501953e-01, 8.866458e-12,
 9.506836e-01, 8.765289e-12,
 9.511719e-01, 8.664929e-12,
 9.516602e-01, 8.565804e-12,
 9.521484e-01, 8.468273e-12,
 9.526367e-01, 8.371466e-12,
 9.531250e-01, 8.275561e-12,
 9.536133e-01, 8.181305e-12,
 9.541016e-01, 8.088775e-12,
 9.545898e-01, 7.996475e-12,
 9.550781e-01, 7.904517e-12,
 9.555664e-01, 7.813141e-12,
 9.560547e-01, 7.722986e-12,
 9.565430e-01, 7.633195e-12,
 9.570312e-01, 7.543958e-12,
 9.575195e-01, 7.456057e-12,
 9.580078e-01, 7.369770e-12,
 9.584961e-01, 7.283954e-12,
 9.589844e-01, 7.198756e-12,
 9.594727e-01, 7.114427e-12,
 9.599609e-01, 7.031230e-12,
 9.604492e-01, 6.948633e-12,
 9.609375e-01, 6.866774e-12,
 9.614258e-01, 6.786367e-12,
 9.619141e-01, 6.707356e-12,
 9.624023e-01, 6.628800e-12,
 9.628906e-01, 6.550745e-12,
 9.633789e-01, 6.473353e-12,
 9.638672e-01, 6.397070e-12,
 9.643555e-01, 6.321306e-12,
 9.648438e-01, 6.246233e-12,
 9.653320e-01, 6.172530e-12,
 9.658203e-01, 6.100229e-12,
 9.663086e-01, 6.028565e-12,
 9.667969e-01, 5.957551e-12,
 9.672852e-01, 5.887299e-12,
 9.677734e-01, 5.817925e-12,
 9.682617e-01, 5.749093e-12,
 9.687500e-01, 5.680906e-12,
 9.692383e-01, 5.613857e-12,
 9.697266e-01, 5.547825e-12,
 9.702148e-01, 5.482125e-12,
 9.707031e-01, 5.416716e-12,
 9.711914e-01, 5.351833e-12,
 9.716797e-01, 5.287812e-12,
 9.721680e-01, 5.224350e-12,
 9.726562e-01, 5.161541e-12,
 9.731445e-01, 5.099841e-12,
 9.736328e-01, 5.039292e-12,
 9.741211e-01, 4.979301e-12,
 9.746094e-01, 4.919761e-12,
 9.750977e-01, 4.860841e-12,
 9.755859e-01, 4.802550e-12,
 9.760742e-01, 4.744733e-12,
 9.765625e-01, 4.687370e-12,
 9.770508e-01, 4.630886e-12,
 9.775391e-01, 4.575208e-12,
 9.780273e-01, 4.519872e-12,
 9.785156e-01, 4.464830e-12,
 9.790039e-01, 4.410394e-12,
 9.794922e-01, 4.356700e-12,
 9.799805e-01, 4.303540e-12,
 9.804688e-01, 4.250893e-12,
 9.809570e-01, 4.199281e-12,
 9.814453e-01, 4.148630e-12,
 9.819336e-01, 4.098500e-12,
 9.824219e-01, 4.048774e-12,
 9.829102e-01, 3.999753e-12,
 9.833984e-01, 3.951451e-12,
 9.838867e-01, 3.903755e-12,
 9.843750e-01, 3.856687e-12,
 9.848633e-01, 3.810960e-12,
 9.853516e-01, 3.766575e-12,
 9.858398e-01, 3.723081e-12,
 9.863281e-01, 3.680660e-12,
 9.868164e-01, 3.639822e-12,
 9.873047e-01, 3.601018e-12,
 9.877930e-01, 3.564004e-12,
 9.882812e-01, 3.529003e-12,
 9.887695e-01, 3.496745e-12,
 9.892578e-01, 3.467542e-12,
 9.897461e-01, 3.441006e-12,
 9.902344e-01, 3.417382e-12,
 9.907227e-01, 3.397121e-12,
 9.912109e-01, 3.380337e-12,
 9.916992e-01, 3.366574e-12,
 9.921875e-01, 3.355297e-12,
 9.926758e-01, 3.346118e-12,
 9.931641e-01, 3.337256e-12,
 9.936523e-01, 3.325433e-12,
 9.941406e-01, 3.306956e-12,
 9.946289e-01, 3.277012e-12,
 9.951172e-01, 3.229301e-12,
 9.956055e-01, 3.155062e-12,
 9.960938e-01, 3.044822e-12,
 9.965820e-01, 2.888941e-12,
 9.970703e-01, 2.676945e-12,
 9.975586e-01, 2.398791e-12,
 9.980469e-01, 2.048157e-12,
 9.985352e-01, 1.623609e-12,
 9.990234e-01, 1.130297e-12,
 9.995117e-01, 5.813668e-13,
 1.000000e+00, 0.000000e+00};

 reference = ref;
}

void ComputeOutflowBoundaryError(TFEFunction2D *ufct, double *val)
{
  double h, x=0,values[3],y,min,max,L2, H1, *reference;
  double derivative, area_ref, area, var_ref, var;
  int i, bound_points = 2049;
  h = 1.0/(bound_points-1);
  double aref[3], bref[3], a[3], b[3];

  min = 1e10;
  max = -1e10;
  L2 = 0;
  H1 = 0;
  area = 0;
  area_ref = 0;
  var = 0;
  var_ref = 0;

  OutflowBoundaryReference(reference);
  a[0] = a[1] = a[2] = b[0] = b[1] = b[2] = -4711;
  aref[0] = aref[1] = aref[2] = bref[0] = bref[1] = bref[2] = -4711;
 
  for(i=0;i<bound_points;i++)
  {
      y=i*h;
      if ((reference[2*i+1] >=0.01)&&(aref[0]==-4711))
     	  aref[0] =  y-h;
      if ((reference[2*i+1] >=0.1)&&(aref[1]==-4711))
	  aref[1] =  y-h;
      if ((reference[2*i+1] >=0.99)&&(aref[2]==-4711))
	  aref[2] =  y-h;
      if ((reference[2*i+1] <0.01)&&(bref[0]==-4711)&&(y>0.5))
	  bref[0] =  y-h;
      if ((reference[2*i+1] <0.1)&&(bref[1]==-4711)&&(y>0.5))
	  bref[1] =  y-h;
      if ((reference[2*i+1] <0.99)&&(bref[2]==-4711)&&(y>0.5))
	  bref[2] =  y-h;
  }  
/*
aref[0] =  2.919922e-01; 
aref[1] =  3.105469e-01;
  aref[2] =  3.559570e-01;
  bref[0] =  7.075195e-01;
  bref[1] =  6.889648e-01;
  bref[2] =  6.435547e-01;
  a[0] = a[1] = a[2] = b[0] = b[1] = b[2] = -4711;
*/
 
  for (i=0;i<bound_points; i++)
  {
      y = i*h;
      if (fabs(y-reference[2*i]) > 1e-7)
	  OutPut(i << " reference data ???? " << fabs(y-reference[2*i]) 
		 << " " << y << " " << reference[2*i] << endl);

      ufct->FindGradient(x,y,values);
      // values[0] is the value of the fe function on the outflow boundary
      // values[2] is the value of the y-derivative of the fe function 
      // on the outflow boundary
      if (values[0] > max)
	  max = values[0];
      if (values[0] < min)
	  min = values[0];

      // apply Simpson's rule 
      if ((i==0)||(i==bound_points))
      {
	  //L2 += (values[0] - reference[2*i+1])*(values[0] - reference[2*i+1]);
	  L2 += fabs(values[0] - reference[2*i+1]);
	  area_ref += reference[2*i+1];
	  area += fabs(values[0]);
      }
      else
      {
	  if (i%2 == 0)
	  {
	      L2 += 2*fabs(values[0] - reference[2*i+1]);
	      area_ref += 2* reference[2*i+1];
	      area += 2*fabs(values[0]);
	      //L2 += 2*(values[0] - reference[2*i+1])*(values[0] - reference[2*i+1]);
	  }
	  else
	  {
	      L2 += 4*fabs(values[0] - reference[2*i+1]);
	      area_ref += 4*reference[2*i+1];
	      area += 4*fabs(values[0]);
	      	  
	      //L2 += 4*(values[0] - reference[2*i+1])*(values[0] - reference[2*i+1]);
	  }
      }
      
      // approximate derivative of reference curve by central difference
      if ((i==0)||(i==bound_points))
	  derivative = 0;
      else
	  derivative = (reference[2*i+3] -  reference[2*i-1])/(reference[2*i+2] -  reference[2*i-2]); 

      // apply Simpson's rule 
      if ((i==0)||(i==bound_points))
      {
	  //H1 += (values[2] - derivative)*(values[2] - derivative);
	      H1 += fabs(values[2] - derivative);
	      var_ref += fabs(derivative);
	      var += fabs(values[2]);
      }
      else
      {
	  if (i%2 == 0)
	  {
	      H1 += 2*fabs(values[2] - derivative);
	  //H1 += 2*(values[2] - derivative)*(values[2] - derivative);
	      var_ref += 2*fabs(derivative);
	      var += 2*fabs(values[2]);	      
	  }
	  else
	  {
	      H1 += 4*fabs(values[2] - derivative);
	  //H1 += 4*(values[2] - derivative)*(values[2] - derivative);
	      var_ref += 4*fabs(derivative);
	      var += 4*fabs(values[2]);
	  }
      }
      if (fabs(values[0])>=0.01&& a[0]==-4711 )
	  a[0] = y;
      if (fabs(values[0])>=0.1&&(a[1]==-4711))
	  a[1] = y;
      if ((values[0]>=0.99) &&(a[2]==-4711))
	  a[2] = y;
      if (fabs(values[0])>=0.01)
	  b[0] = y;
      if (fabs(values[0])>=0.1)
	  b[1] = y;
      if ((values[0]<0.99)&&(y>0.5)&&(b[2]==-4711))
	  b[2] = y-h;
  }
  // apply final scaling
  L2 /=(3*bound_points);
  H1 /=(3*bound_points);
  area /=(3*bound_points);
  area_ref /=(3*bound_points);
  var /=(3*bound_points);
  var_ref /=(3*bound_points);
  //cout.setf(ios_base::scientific);
  OutPut(setprecision(3) << "& bdrmin "  << min  << "& bdrmax " << max);
  //OutPut("& bdrl1 " << L2  << "& bdrh11 " << H1);
  //OutPut("& area_ref " << area_ref  << " & area " <<area );
  //OutPut("& var_ref " << var_ref  << " & var " <<var << " &");
  OutPut("& bdrh11 " << H1);// << "& var_ref " << var_ref  << " & var " <<var << " &");
  OutPut(" petrs reference " << fabs(a[0]-aref[0]) +  fabs(b[0]-bref[0]) +
	 fabs((a[2]-a[1])-(aref[2]-aref[1])) + fabs((b[2]-b[1])-(bref[2]-bref[1]))
	 << endl);
  OutPut("petrval " << a[0] << " " << a[1] << " " << a[2]  << " " << b[2] << " " << b[1] << " " 
	 << b[0] <<  endl);
  OutPut("petrref " << aref[0] << " " << aref[1] << " " << aref[2]  << " " << bref[2] << " " << bref[1] << " " 
	 << bref[0] <<  endl);
}

void ComputeCoordinates(int i, int N, int Nz, double *x, double *y, double *z)
{
    double zmin = 0.0, zmax = 1.0;
    int j;
    
    
    j = i%N;
    x[0] = 1.0*j/(N-1);

    j = (int) (i/(N*N));
    z[0] = zmin + (zmax - zmin)*j/(Nz - 1);

    j = i - j*N*N;
    j = (int)(j/N);
    y[0] = 1.0*j/(N-1);
}


// void Build_3D_FDM_Matrix(double h, TFEFunction2D *u)
// {
//     int i, n, N, Nz, N_entries, N2, *row_ptr, *col_ptr, j, k;
//     double *sol3d, *rhs3d, *entries, x, y, z, hx, hz, values[3];
//     TSquareMatrix *matrix;
//     TSquareStructure2D *matrix_structure;
// 
//     //N = (int)sqrt(coll->GetN_Cells()+1e-4)+1;
//     N = (int)(sqrt(2.0)/h+1e-4) + 1;
//     Nz = (int)TDatabase::ParamDB->DRIFT_Z+1;
//     N2 = N*N;
//     OutPut("N " << N << " Nz " << Nz);
// 
//     // number of unknowns in 3D
//     n = N*N*Nz;
//     sol3d = new double[n];
//     rhs3d = new double[n];
//     row_ptr = new int[n+1];
// 
//     // count number of matrix N_entries
//     N_entries = 0;
//     for (i=0;i<n;i++)
//     {
// 	// the node itself
// 	N_entries++;
// 	// left neighbour (x direction)
// 	if (i%N!=0)
// 	    N_entries++;
// 	// right neighbour (x direction)
// 	if ((i+1)%N!=0)
// 	    N_entries++;
// 	// lower neighbour (y direction)
// 	if (((int)(i/N2)==(int)((i-N)/N2))&&(i-N>=0))
// 	    N_entries++;
// 	// upper neighbour (y direction)
// 	if ((int)(i/N2)==(int)((i+N)/N2))
// 	    N_entries++;
// 	// lower neighbour (z direction)
// 	if (i>=N2)
// 	    N_entries++;
// 	// upper neighbour (z direction)
// 	if (i<=(Nz-1)*(N2-1))
// 	    N_entries++;
//     }
//     OutPut(" N_entries " << N_entries << endl);
// 
//     // compute matrix structure
//     col_ptr = new int[N_entries];
//    
//     j = 0;
//     for (i=0;i<n;i++)
//     {
// 	row_ptr[i] = j;
// 	// the node itself
// 	col_ptr[j] = i;
// 	j++;
// 	// left neighbour (x direction)
// 	if (i%N!=0)
// 	{
// 	   col_ptr[j] = i-1;
// 	   j++;
// 	}
// 	// right neighbour (x direction)
// 	if ((i+1)%N!=0)
// 	{
// 	    col_ptr[j] = i+1;
// 	    j++;
// 	}
// 	// lower neighbour (y direction)
// 	if (((int)(i/N2)==(int)((i-N)/N2))&&(i-N>=0))
// 	{
// 	    col_ptr[j] = i-N;
// 	    j++;
// 	}
// 	// upper neighbour (y direction)
// 	if ((int)(i/N2)==(int)((i+N)/N2))
// 	{
// 	    col_ptr[j] = i+N;
// 	    j++;
// 	}
// 	// lower neighbour (z direction)
// 	if (i>=N2)
// 	{
// 	    col_ptr[j] = i - N2;
// 	    j++;
// 	}
// 	// upper neighbour (z direction)
// 	if (i<=(Nz-1)*(N2-1))
// 	{
// 	    col_ptr[j] = i+N2;
// 	    j++;
// 	}
//     }
//     row_ptr[n] = j;
// 
//     j = row_ptr[0];
//     /*for (i=0;i<n;i++)
//     {
// 	k = row_ptr[i+1];
// 	for(;j<k;j++)
// 	    OutPut(i << " " << col_ptr[j] << endl);
// 	    }*/
//     matrix_structure = new TSquareStructure2D(n, N_entries, col_ptr,
// 		       row_ptr);
//     OutPut("matrix" << endl);
//     matrix = new TSquareMatrix2D(matrix_structure);
//     OutPut("done" << endl);
//     entries = matrix->GetEntries();
//     /*for (i=0;i<n;i++)
//     {
// 	ComputeCoordinates(i,N,Nz,&x,&y,&z);
// 	OutPut(i<<" : " <<x << " " << y << " " <<z<<endl);
// 	}*/
//     // 3D Laplacian as example
//     // solution is u = xyz
//     memset(rhs3d, 0, n*SizeOfDouble);
//     hx = 1.0/(N-1);
//     hz = 1.0/(Nz-1);
//     for (i=0;i<n;i++)
//     {
// 	// interior node
// 	if ( row_ptr[i+1]-row_ptr[i] ==7) 
// 	{
// 	   j = row_ptr[i];
// 	   entries[j] = 2.0/(hx*hx)+2.0/(hx*hx)+2.0/(hz*hz);
// 	   for (j=row_ptr[i]+1;j< row_ptr[i+1];j++)
// 	   {
// 	       k = col_ptr[j];
// 	       if ((k==i-N2)||(k==i+N2))
// 		   entries[j] = -1.0/(hz*hz);
// 	       else
// 		   entries[j] = -1.0/(hx*hx);
// 	   }
// 	    
// 	}
// 	else
// 	// node on the boundary
// 	{
// 	   ComputeCoordinates(i,N,Nz,&x,&y,&z);
// 	   rhs3d[i] = x*y*z;
// 	   sol3d[i] = rhs3d[i];
// 	   j = row_ptr[i];
// 	   entries[j] = 1;
// 	   for (j=row_ptr[i]+1;j< row_ptr[i+1];j++)
// 	       entries[j] = 0;
// 	}
//     }
// /*    for (i=0;i<n;i++)
//     {
// 	k = row_ptr[i+1];
// 	for (j=row_ptr[i];j<k;j++)
// 	{
// 	    if (entries[j]!=0)
// 	      OutPut(i << " : " << col_ptr[j] << " " << entries[j] << " " << endl);
// 	}
// 	}*/
//     
//     Solver(matrix,rhs3d,sol3d);
// 
//     for (i=0;i<n;i++)
//     {
// 	ComputeCoordinates(i,N,Nz,&x,&y,&z);
// 	if (fabs( sol3d[i] - x*y*z)>1e-10)
// 	    OutPut(i << " " << sol3d[i] - x*y*z << endl);
//     }
//     // example for getting values from the 2d fe function
//     // this is not very efficient and should be called for each
//     // pair (x,y) only once
//     for (i=0;i<N2;i++)
//     {
// 	ComputeCoordinates(i,N,Nz,&x,&y,&z);
// 	u->FindGradient(x,y,values);
// 	OutPut("value(" <<x<<","<<y<<") = "<< values[0] <<endl); 
//     }	
//     exit(4711);
// }
// 


/** compute solution at outflow x=0 */
void ComputeCutLines(int level, TFEFunction2D *ufct, double *values,
		     double meshsize)
{
  double h, x=1,val[3],y, max = 0, x1 = 0, x2 = 0, size;
  double intlow = 0, intupp = 0, c, x3;
  int i, bound_points = 10001;//10001;
  int first = 1, start, end;
  
  h = 1.0/(bound_points-1);
  size = meshsize/sqrt(2);
  //OutPut("size "<< 1.0/size <<endl);
  //OutPut(endl);

  // smearing of the boundary layer at x = 0
  x = 0;
  start = (int) (0.15/h);
  end = (int) (0.45/h);
  for (i=start;i<=end; i++)
  {
      y = i*h;
      ufct->FindGradient(x,y,val);
      //OutPut("cut-y " << level << " " <<  y << " " <<  val[0] << endl);
      if ((val[0] >= 0.1)&&(x1==0))
	 x1 = y; 
      if ((val[0] > 0.9)&&(x2==0))
      {
	 x2 = y-h;
	 break;
      }
  }
  //OutPut(setprecision(7) << " " << x1 <<  " " << x2 << " ");
  values[0] = x2 - x1;
  values[2] = x1;
  x1 = x2 = 0;
  start = (int) (0.55/h);
  end = (int) (0.85/h);
  for (i=start;i<=end; i++)
  {
      y = i*h;
      ufct->FindGradient(x,y,val);
      // OutPut("cut-y " << level << " " <<  x << " " <<  val[0] << endl);
      if ((val[0] < 0.1)&&(x1==0))
      {
	 x1 = y-h;
	 break;
      }
      if ((val[0] <= 0.9)&&(x2==0))
      {
	 x2 = y;
      }
  }
  //OutPut(x1 <<  " " << x2 << " ");

  values[1] = x1 - x2;
  values[2] = x1-values[2];
  //OutPut(" smear "<< values[0] << " " << values[1] << endl);
  return;
}

void ComputeOutflowBoundaryErrorNew(TFEFunction2D *ufct, double *val)
{
  double h, *reference, max, min, x=0, y, values[3], mid, width = -4711;
  int i, tmp=0, boundpoints = 500;//32769;
  TCollection *Coll;

  Coll = ufct->GetFESpace2D()->GetCollection();
  h = Coll->GetCell(0)->GetShortestEdge();
  h = 1.0/(boundpoints-1);

  min = 1e10;
  max = -1e10;
 
  ufct->FindGradient(0,0.5,values);
  mid = values[0];
  y = 0;

  while(fabs(1-y)>1e-6)
  {
      ufct->FindGradient(x,y,values);
       if (values[0] <min)
	 min = values[0];
       if (values[0] >max)
	 max = values[0];
       if ((values[0] >= 0.1)&& (width==-4711))
	 {
	   width = y;
	   tmp = 1;
	 }
       if ((values[0] < 0.1)&& (tmp))
	 {
	   width = y - width -h;
	   tmp =0;
	 }
       y += h;
    }
  val[0] = fabs(min);
  val[1] = max - mid;
  val[2] = width;
  val[3] = mid-1;
}

void ComputeReferenceOutflowValues(double *values)
{
  int i;
  double *reference, x1, x2;

  OutflowBoundaryReference(reference);
  x1 = x2 = 0;
  // reference width of the boundary layer at x = 0
  for (i=600;i<=800; i++)
  {
    if ((reference[2*i+1] >=0.1)&&(x1==0))
      x1 = reference[2*i];
    if ((reference[2*i+1] >0.9)&&(x2==0))
      {
	x2 = reference[2*i-2];
	break;
      }
  }

  OutPut(setprecision(7) << " reference " << x1 <<  " " << x2 << " ");
  values[0] = x2 - x1;
  values[2] = x1;
  x1 = x2 = 0;
  for (i=1300;i<=1500; i++)
  {

    if ((reference[2*i+1] <0.1)&&(x1==0))
      {
	x1 = reference[2*i-2];
	break;
      }
    if ((reference[2*i+1] <=0.9)&&(x2==0))
      {
	x2 = reference[2*i];
      }
  }
  OutPut(setprecision(7) << " reference " << x1 <<  " " << x2 << " " << endl);

  values[1] = x1 - x2;
  values[2] = x1-values[2];
 
 return;
}

void CheckWrongNeumannNodes(TCollection *Coll, TFESpace2D *fespace,
			    int &N_neum_to_diri, int* &neum_to_diri,
			    int* &neum_to_diri_bdry, 
			    double* &neum_to_diri_param)
{
    const int max_entries = 4096;  
  int i, j, N_, min_val;
  int N_Cells, N_V, diri_counter = 0, found, diri_counter_1 = 0;
  int *global_numbers, *begin_index, *dof;
  int boundary_vertices[4], tmp_diri[max_entries], tmp_bdry[max_entries];
  double x[4], y[4], eps = 1e-6, tmp_param[max_entries];
  TBaseCell *cell;
  TVertex *vertex;
  FE2D CurrentElement;

  // number of mesh cells
  N_Cells = Coll->GetN_Cells();
  // array with global numbers of d.o.f.
  global_numbers = fespace->GetGlobalNumbers();
  // array which points to the beginning of the global numbers in
  // global_numbers for each mesh cell
  begin_index = fespace->GetBeginIndex();

  diri_counter = 0;
  for(i=0;i<N_Cells;i++)
  {
    cell = Coll->GetCell(i);
    N_V = cell->GetN_Vertices();
    found = 0;
    for (j=0;j<N_V;j++)
    {
      // read coordinates of the mesh cell
      boundary_vertices[j] = 0;
      vertex = cell->GetVertex(j);
      vertex->GetCoords(x[j], y[j]);
      // vertex on the upper lid
      if ((fabs(y[j])<eps)||(fabs(1-x[j])<eps)||(fabs(1-y[j])<eps))
      {
	   boundary_vertices[j] = 1;
	   found++;
      }
    }
    // no cell with edge with vertex on the boundary
    if (found<2) 
	continue;
    // finite element on the mesh cell
    CurrentElement = fespace->GetFE2D(i, cell);
    // number of basis functions (= number of d.o.f.)
    N_ = TFEDatabase2D::GetN_BaseFunctFromFE2D(CurrentElement);
    // the array which gives the mapping of the local to the global d.o.f.
    dof = global_numbers+begin_index[i];
    switch(CurrentElement)
    {
	// P_1, Q_1
	case C_P1_2D_T_A:
	case C_Q1_2D_Q_A:
	case C_Q1_2D_Q_M:
	    for (j=0;j<N_V;j++)
	    {
		// vertex on the boundary
		if (boundary_vertices[j])
		{
		    if (CurrentElement==C_P1_2D_T_A)
			tmp_diri[diri_counter] = dof[j];
		    else
		    {
			if (j<2)
			    tmp_diri[diri_counter] = dof[j];
			else
			{
			    if (j==2)
				tmp_diri[diri_counter] = dof[3];
			    else
				tmp_diri[diri_counter] = dof[2];
			}
		    }
		    if (diri_counter > max_entries)
		    {
			OutPut("tmp_diri too short !!!"<<endl);
			exit(4711);
		    }
		    if (fabs(y[j])<eps)
		    {
			tmp_bdry[diri_counter] = 0;
			tmp_param[diri_counter] = x[j];
		    }
		    if (fabs(1-y[j])<eps)
		    {
			tmp_bdry[diri_counter] = 2;
			tmp_param[diri_counter] = 1-x[j];
		    }
		    if (fabs(1-x[j])<eps)
		    {
			tmp_bdry[diri_counter] = 1;
			tmp_param[diri_counter] = y[j];
		    }
		    diri_counter++;
		}
	    }
	    break;
	default:
	    OutPut("CheckNeumannNodesForVelocity not implemented for element "
		   << CurrentElement << endl);
	    OutPut("code can be run without CheckNeumannNodesForVelocity, just delete the exit" << endl);
	    exit(4711);
    }	    
  }
 
  // condense
  for (i=0;i<diri_counter;i++)
  {
      if (tmp_diri[i] == -1)
	  continue;
      diri_counter_1++;
      for (j=i+1;j<diri_counter;j++)
      {
	  if (tmp_diri[i] == tmp_diri[j])
	  {
	      tmp_diri[j] = -1;
	  }
      }
  }

  OutPut("CheckNeumannNodesForVelocity: N_neum_to_diri " << diri_counter_1 << endl);
  N_neum_to_diri = diri_counter_1;
  // allocate array for the indices
  neum_to_diri = new int[diri_counter_1];
  // allocate array for the corresponding boundary numbers
  neum_to_diri_bdry = new int[diri_counter_1];
  // allocate array for the corresponding boundary parameters
  neum_to_diri_param = new double[diri_counter_1];
  // fill array and sort
  for (i=0;i<diri_counter_1;i++)
  {
      min_val = tmp_diri[0];
      found = 0;
      for (j=1;j<diri_counter;j++)
      {
	  if ((tmp_diri[j]>0) && ((tmp_diri[j] < min_val) || 
				  (min_val == -1)))
	  {
	       min_val =  tmp_diri[j];
	       found = j;
	  }
      }
      neum_to_diri[i] = tmp_diri[found];
      neum_to_diri_bdry[i] = tmp_bdry[found];
      neum_to_diri_param[i] = tmp_param[found];
      tmp_diri[found] = -1;
  }
//
//  for (i=0;i<diri_counter_1;i++)
//  {
//      OutPut(i << " " << neum_to_diri[i] << " " << neum_to_diri_bdry[i] <<
//	     " " << neum_to_diri_param[i] <<  endl);
//  }
}

